#!/usr/bin/env lua
--/boot/cubix: well, cubix!

AUTHOR = "Lukas Mendes"
BUILD_DATE = "2015-11-28"
VERSION = "0.4.0"
--[[
    version format: major.revision.minor
        major: linear
        revision: odd: unstable
        revision: even: stable
        minor: number of RELEASES necessary to get to this version, not including BUILDS
    0.3.8 < 0.3.9 < 0.3.10 < 0.3.11 < 0.4.0 < 0.4.1 [...]
    {           UNSTABLE           }  {  STABLE   }
]]

STABLE = false

if STABLE then
    local pullEvent = os.pullEvent
    os.pullEvent = os.pullEventRaw
else
    print("[cubix] warning, loading a unstable")
end

_G['IS_CUBIX'] = true

--frontend for compatibility
term.set_term_color = function (c)
    if term.isColor() then
        term.setTextColor(c)
    end
end

os.viewTable = function (t)
    print(t)
    for k,v in pairs(t) do
        print(k..","..tostring(v).." ("..type(v)..")")
    end
end

os.tail = function(t)
       if # t <= 1 then
          return nil
       end
       local newtable = {}
       for i, v in ipairs(t) do
          if i > 1 then
              table.insert(newtable, v)
          end
       end
       return newtable
    end

local Args = {...} --arguments to cubix

os.__boot_flag = true

os.strsplit = function (inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    if type(inputstr) ~= 'string' then
        os.ferror("os.strsplit: type(inputstr) == "..type(inputstr))
        return 1
    end
    if inputstr == nil then
        return ''
    end
    local t={} ; i=1
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        t[i] = str
        i = i + 1
    end
    return t
end

kflag = {}

for k,v in ipairs(Args) do
    if v == 'quiet' then
        kflag.quiet = true
    elseif v == 'nodebug' then
        kflag.nodebug = true
    elseif v == 'splash' then
        kflag.splash = true
    elseif v == 'acpi' then
        kflag.acpi = true
    elseif string.sub(v, 0, 4) == 'init' then
        k = os.strsplit(v, '=')
        kflag.init = k[2]
    elseif string.sub(v, 0, 8) == 'runlevel' then
        k = os.strsplit(v, '=')
        kflag.sRunlevel = k[2]
    end
end

if kflag.init == nil then
    kflag.init = "/sbin/init"
end

os.__kflag = kflag

local pcid = fs.open("/var/pcid", 'w')
local _label = os.getComputerLabel()
if _label == nil then _label = 'cubix-pc' end
pcid.write(_label)
pcid.close()

local version = fs.open("/proc/version", 'w')
version.write(VERSION)
version.close()

local build = fs.open("/proc/build_date", 'w')
build.write(BUILD_DATE)
build.close()

local sttime = fs.open("/proc/sttime", 'w')
sttime.write(tostring(os.time()))
sttime.close()

DEVICES = {}
MANAGED_FILES = {}
TTYS = {}

os.list_mfiles = {}

os.system_halt = function()
    while true do sleep(0) end
end

os._read = read
os._sleep = os.sleep

os.runfile = function(cmd)
    os.ferror("[cubix_deprecated] Sorry, os.runfile is marked as bad code and will not be in this cubix")
    return -1
end

os.ferror = function(message)
    --TODO: stdin, stdout and stderr
    term.set_term_color(colors.red)
    print(message)
    term.set_term_color(colors.white)
end

os.safestr = function (s)
    if string.byte(s) > 191 then
        return '@'..string.byte(s)
    end
    return s
end

os.generateSalt = function(l)
    if l < 1 then
        return nil
    end
    local res = ''
    for i = 1, l do
        res = res .. string.char(math.random(32, 126))
    end
    return res
end

function _prompt(message, yes, nope)
    write(message..'['..yes..'/'..nope..'] ')
    local result = read()
    if result == yes then
        return true
    else
        return false
    end
end

_G['prompt'] = _prompt

if os.loadAPI("/lib/video_manager") then
    print("loaded video")
end

if os.loadAPI("/lib/debug_manager") then
    debug = _G["debug_manager"]
    debug.debug_write("debug: loaded")
else
    debug.debug_write = print
    debug.debug_write("debug: not loaded")
end

if kflag.quiet then
    debug.debug_write = function(x)end
    debug.testcase = function()end
    debug.ferror = function()end
end

os.debug = debug

debug.debug_write("Cubix version "..VERSION.." loading...")

os.lib = {}
os.internals = {}
os.internals._kernel = {}

local isReloadable = {}

function loadmodule(nmodule, path)
    os.debug.debug_write('[loadmodule] loading: '..nmodule)
    if isReloadable[nmodule] ~= nil and isReloadable[nmodule] == false then
        os.debug.debug_write("[loadmodule] cannot reload "..nmodule..", please reboot!", nil, true)
        return 0
    end
    if os.loadAPI(path) then
        _G[nmodule] = _G[fs.getName(path)]
        if _G[nmodule].libroutine ~= nil then
            _G[nmodule].libroutine()
        else
            os.debug.debug_write("[loadmodule] libroutine() not found", nil, true)
            sleep(1)
        end
        os.lib[nmodule] = _G[fs.getName(path)]
        isReloadable[nmodule] = os.lib[nmodule].RELOADABLE
        os.debug.debug_write('[loadmodule] loaded: '..nmodule)
    else
        os.debug.kpanic("[loadmodule] not loaded: "..nmodule)
    end
end

os.internals.loadmodule = loadmodule

--hack
os.lib.proc = {}
os.lib.proc.running = 0
os.processes = {}

function make_readonly(table)
    local temporary = {}
    setmetatable(temporary, {
        __index = table,
        __newindex = function(_t, k, v)
            local runningproc = os.processes[os.lib.proc.running]
            if runningproc == nil then
                os.debug.debug_write("[readonly -> proc] cubix is not running any process now!", nil, true)
                table[k] = v
                return 0
            end
            if runningproc.uid ~= 0 then
                os.debug.debug_write("[readonly] Attempt to modify read-only table", nil, true)
            else
                table[k] = v
            end
        end,
        __metatable = false
    })
    os.debug.debug_write("[readonly] new read-only table!")
    return temporary
end

_G['make_readonly'] = make_readonly

--acpi module
if kflag.acpi then
    loadmodule("acpi", "/lib/acpi.lua")
end

--another hack
os.lib.login = {}
os.lib.login.currentUser = function()
    return {uid = 2}
end

--filesystem manager
loadmodule("fs_mngr", "/lib/fs_manager")

permission.initKernelPerm()

if fs.exists("/dev/ram") and kflag.acpi then
    os.lib.acpi.acpi_hwake()
else

--process manager
function os.internals._kernel.register_mfile(controller)
    debug.debug_write("[mfile] "..controller.name.." created")
    os.list_mfiles[controller.name] = controller.file
    fs.open(controller.name, 'w', fs.perms.SYS).close()
end

loadmodule("proc", "/lib/proc_manager")

--hash manager
loadmodule("hash", "/lib/hash_manager")

function os.internals._kernel.register_device(d)
    os.debug.debug_write("[dev] "..d.name.." created")
    DEVICES[d.name] = d.device
    fs.open(d.name, 'w', fs.perms.SYS).close()
end

--device manager
loadmodule("devices", "/lib/device_manager")
os.list_devices = fs_mngr.deepcopy(DEVICES)

--tty, login and pipe managers
function os.internals._kernel.register_tty(path, tty)
    os.debug.debug_write("[tty] new tty: "..path)
    TTYS[path] = tty
    fs.open(path, 'w', fs.perms.SYS).close()
end

loadmodule("tty", "/lib/tty_manager")
loadmodule("login", "/lib/login_manager")
loadmodule("pipe", "/lib/pipe_manager")

os.pprint = function(message, pipe, double)
    if double == nil then double = false end
    if message == nil then message = '' end
    if pipe ~= nil then
        pipe:write(message..'\n')
        if double then
            print(message)
        end
    else
        print(message)
    end
end

term.clear()
term.setCursorPos(1,1)

--finishing boot
os.__debug_buffer = debug.__debug_buffer
os.__boot_flag = false

--setting tty
os.lib.tty.current_tty("/dev/tty0")

--finally, run!
os.__parent_init = os.new_process(kflag.init)
os.run_process(os.__parent_init)

--if something goes wrong in kflag.init, just halt
os.system_halt()

end
