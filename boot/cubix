#!/usr/bin/env lua
--/boot/cubix: well, cubix!(at least the booting is here)

AUTHOR = "Lukas Mendes"
BUILD_DATE = "2016-04-25"

--  version format: major.revision.minor
--      major: linear
--      revision: odd: unstable
--      revision: even: stable
--      minor: number of RELEASES necessary to get to this version, not including BUILDS
--  0.3.8 < 0.3.9 < 0.3.10 < 0.3.11 < 0.4.0 < 0.4.1 [...]
--  {           UNSTABLE           }  {  STABLE   }
VERSION_MAJOR = 0
VERSION_REV   = 5
VERSION_MINOR = 3
VERSION_RC = 2
VERSION = VERSION_MAJOR.."."..VERSION_REV.."."..VERSION_MINOR
if VERSION_RC ~= 0 then
    VERSION = VERSION.."-rc"..VERSION_RC
end

STABLE = ((VERSION_REV % 2) == 0)

_G["CUBIX_VERSION"] = VERSION
_G["CUBIX_STABLE"] = STABLE
_G["CUBIX_BUILDD"] = BUILD_DATE

if STABLE then
    local pullEvent = os.pullEvent
    os.pullEvent = os.pullEventRaw
else
    print("[cubix] warning, loading a unstable")
end

_G['IS_CUBIX'] = true

--frontend for compatibility
term.set_term_color = function (c)
    if term.isColor() then
        term.setTextColor(c)
    end
end

if os.loadAPI("/boot/cubix-initramfs") then
    print("[cubix] loaded initramfs.")
else
    term.set_term_color(colors.red)
    print("[cubix] initramfs error, can't start kernel.")
    while true do sleep(0) end
end

local Args = {...} --arguments to cubix

os.__boot_flag = true

kflag = {}

for _,v in ipairs(Args) do
    if v == 'quiet' then
        kflag.quiet = true
    elseif v == 'splash' then
        kflag.splash = true
    elseif v == 'acpi' then
        kflag.acpi = true
    elseif string.sub(v, 0, 4) == 'init' then
        k = os.strsplit(v, '=')
        kflag.init = k[2]
    elseif string.sub(v, 0, 8) == 'runlevel' then
        k = os.strsplit(v, '=')
        kflag.sRunlevel = k[2]
    end
end

if kflag.init == nil then
    kflag.init = "/sbin/init"
end

os.__kflag = kflag

local pcid = fs.open("/var/pcid", 'w')
local _label = os.getComputerLabel()
if _label == nil then _label = 'generic' end
pcid.write(_label)
pcid.close()

DEVICES = {}
MANAGED_FILES = {}
TTYS = {}

os.list_mfiles = {}

--halting.
os.system_halt = function()
    while true do sleep(0) end
end

os._read = read
os._sleep = os.sleep

os.ferror = function(message)
    --[[
    device_write("/dev/stderr", message)
    ]]
    term.set_term_color(colors.red)
    print(message)
    term.set_term_color(colors.white)
end

_G['ferror'] = os.ferror

if os.loadAPI("/lib/video_manager") then
    print("loaded video")
end

--load debug manager
if os.loadAPI("/lib/debug_manager") then
    __debug = _G["debug_manager"]
    __debug.debug_write("debug: loaded")
else
    __debug.debug_write = print
    term.set_term_color(colors.red)
    __debug.debug_write("debug: not loaded")
    term.set_term_color(colors.white)
end

os.debug = __debug
debug = os.debug

cubix = {}
_G['cubix'] = cubix

local booted = false

cubix.boot_kernel = function() --the function to load the kernel

if booted then
    return ferror("Cubix already booted!")
end
booted = true

if kflag.quiet then
    --if quiet, just make normal debug functions as nothing.
    __debug.debug_write = function()
        os.sleep(math.random() / 16)
    end
    __debug.testcase = function()
    end
    __debug.ferror = function()end
end

--Welcome message
term.set_term_color(colors.green)
os.debug.debug_write("Welcome to Cubix "..VERSION..'!')
print('\n')
term.set_term_color(colors.white)
os.sleep(.5)

os.lib = {} --interface to most modules
os.internals = {}
os.internals._kernel = {}

local isReloadable = {}

--default function to load modules
function loadmodule(nmodule, path, dflag)
    os.debug.debug_write('[mod] loading: '..nmodule, dflag)
    if isReloadable[nmodule] ~= nil and isReloadable[nmodule] == false then
        os.debug.debug_write("[mod] cannot reload "..nmodule..", please reboot!", nil, true)
        return 0
    end
    if os.loadAPI(path) then
        _G[nmodule] = _G[fs.getName(path)]
        if _G[nmodule].libroutine ~= nil then
            _G[nmodule].libroutine()
        else
            os.debug.debug_write("[mod] libroutine() not found", dflag, true)
            sleep(.3)
        end
        os.lib[nmodule] = _G[fs.getName(path)]
        isReloadable[nmodule] = os.lib[nmodule].RELOADABLE
        term.set_term_color(colors.green)
        os.debug.debug_write('[mod] loaded: '..nmodule, dflag)
        term.set_term_color(colors.white)
    else
        os.debug.kpanic("[mod] not loaded: "..nmodule, dflag)
    end
end

--unload a module
function unloadmod(mod)
    if isReloadable[mod] ~= nil and isReloadable[mod] == false then
        os.debug.debug_write("[mod] cannot unload "..mod..", please reboot!", nil, true)
        return 0
    end

    if os.lib[mod] then
        os.debug.debug_write("[unloadmod] unloading "..mod)
        os.lib[mod] = nil
        return true
    else
        ferror("unloadmod: module not found")
        return false
    end
end

function loadmodule_ret(path)
    -- instead of putting the library into os.lib, just return it
    if path == nil then
        return ferror("[loadmodule_ret] path == nil")
    end
    os.debug.debug_write('[loadmodule:ret] loading: '..path)
    local ret = {}
    if os.loadAPI(path) then
        ret = _G[fs.getName(path)]
        if ret.libroutine ~= nil then
            ret.libroutine()
        else
            os.debug.debug_write("[loadmodule:ret] libroutine() not found", nil, true)
            sleep(.3)
        end
        os.debug.debug_write('[loadmodule:ret] loaded: '..path)
        return ret
    else
        ferror("[loadmodule:ret] not loaded: "..path)
        return nil
    end
end

os.internals.loadmodule = loadmodule
os.internals.loadmodule_ret = loadmodule_ret
os.internals.unloadmod = unloadmod

cubix.loadmodule_ret = loadmodule_ret

--show all loaded modules in the system(shows to stdout)
os.viewLoadedMods = function()
    for k,_ in pairs(os.lib) do
        write(k..' ')
    end
    write('\n')
end

--hack
os.lib.proc = {}
os.lib.proc.running = 0
os.processes = {}

function make_readonly(table)
    local temporary = {}
    setmetatable(temporary, {
        __index = table,
        __newindex = function(_t, k, v)
            local runningproc = os.processes[os.lib.proc.running]
            if runningproc == nil then
                os.debug.debug_write("[readonly -> proc] cubix is not running any process now!", nil, true)
                table[k] = v
                return 0
            end
            if runningproc.uid ~= 0 then
                os.debug.debug_write("[readonly] Attempt to modify read-only table", nil, true)
            else
                table[k] = v
            end
        end,
        __metatable = false
    })
    os.debug.debug_write("[readonly] new read-only table!")
    return temporary
end

_G['make_readonly'] = make_readonly

--acpi module
if kflag.acpi then
    loadmodule("acpi", "/lib/acpi.lua")
end

--hack to load fs, before loding login
os.lib.login = {}
os.lib.login.currentUser = function()
    return {uid = 2}
end
os.lib.login.isInGroup = function(uid, gid)
    return uid == gid
end

--filesystem manager
loadmodule("fs_mngr", "/lib/fs_manager")

--some default things in /proc
local version = fs.open("/proc/version", 'w')
version.write(VERSION)
version.close()

local build = fs.open("/proc/build_date", 'w')
build.write(BUILD_DATE)
build.close()

local sttime = fs.open("/proc/sttime", 'w')
sttime.write(tostring(os.clock()))
sttime.close()

--start permission system for kernel boot
permission.initKernelPerm()

--hibernation detection
if fs.exists("/dev/ram") and os.lib.acpi then
    os.lib.acpi.acpi_hwake()
else

--process manager
function os.internals._kernel.register_mfile(controller) --register Managed Files
    debug.debug_write("[mfile] "..controller.name.." created")
    fsdrivers.procfs.register_mfile(controller)
end

loadmodule("proc", "/lib/proc_manager")

--hash manager
loadmodule("hash", "/lib/hash_manager")

function os.internals._kernel.register_device(path, d)
    os.debug.debug_write("[dev] "..path.." created")
    DEVICES[path] = d.device
    fs.open(path, 'w', fs.perms.SYS).close()
end

--device manager
loadmodule("devices", "/lib/device_manager")

--external devices
function from_extdev(name_dev, path_dev, type_dev)
    --path_dev -> /dev/
    --name -> only a id
    --type_dev -> device drivers(something.lua)
    --returns a table with the device methods
    local devmod = loadmodule_ret("/lib/devices/"..type_dev..".lua")
    devmod.setup(name_dev, path_dev)
    return devmod
end

EXTDEVICES = {}
function os.internals._kernel.new_device(typedev, name, pth)
    os.debug.debug_write("[extdev] "..name.." ("..typedev..") -> "..pth)
    EXTDEVICES[name] = {devtype=typedev, path=pth}
    os.internals._kernel.register_device(pth, {name=pth, device=from_extdev(name,pth,typedev)})
end

--default devices
os.internals._kernel.new_device("kbd", "cckbd", "/dev/stdin")
os.internals._kernel.new_device("term", "ccterm", "/dev/stdout")
os.internals._kernel.new_device("err", "ccterm-err", "/dev/stderr")

os.list_devices = deepcopy(DEVICES)
function dev_write(path, data)
    return os.list_devices[path].device_write(data)
end
_G['dev_write'] = dev_write

--device functions
function dev_read(path, bytes) --read from devices
    local result = os.list_devices[path].device_read(bytes)
    return result
end
_G['dev_read'] = dev_read

function dev_available(path) --check if device is available
    local av = os.list_devices[path] ~= nil
    return av
end
_G['dev_available'] = dev_available

function get_device(pth) --get the device object from its path
    return os.list_devices[pth]
end
_G['get_device'] = get_device

function os.list_dev() --list all devices(shows to stdout automatically)
    for k,v in pairs(os.list_devices) do
        write(k..' ')
    end
    write('\n')
end

local perilist = peripheral.getNames()
os.debug.debug_write("[peripheral:st]")
for i = 1, #perilist do
    os.internals._kernel.new_device("peripheral", tostring(peripheral.getType(perilist[i])))
end

--tty manager
function os.internals._kernel.register_tty(path, tty) --register TTY to the system
    os.debug.debug_write("[tty] new tty: "..path)
    fs.open(path, 'w', fs.perms.SYS).close()
end

loadmodule("tty", "/lib/tty_manager")

--Login Manager
loadmodule("login", "/lib/login_manager")

--Pipe manager
loadmodule("pipe", "/lib/pipe_manager")

--Time module
loadmodule("time", "/lib/time")

--Communication Manager // Control Manager
loadmodule("control", "/lib/comm_manager")

--Mersenne Twister implementation
loadmodule("mtrand", "/lib/random/mt_rand.lua")

--Cubix Containers
loadmodule("cbxctr", "/lib/cbxctr/cbxctr.lua")

--Ansi library
loadmodule("libansi", "/lib/colors/libansi.lua")

--print to pipes(doesn't work since the proc change)
os.pprint = function(message, pipe, double)
    if double == nil then double = false end
    if message == nil then message = '' end
    if pipe ~= nil then
        pipe:write(message..'\n')
        if double then
            print(message)
        end
    else
        print(message)
    end
end

term.clear()
term.setCursorPos(1,1)

--finishing boot
os.__debug_buffer = debug.__debug_buffer
os.__boot_flag = false

--setting tty
os.lib.tty.current_tty("/dev/tty0")

--if quiet, return debug to original state(you know, debug is important)
if kflag.quiet then
    if os.loadAPI("/lib/debug_manager") then
        __debug = _G["debug_manager"]
        debug.debug_write("debug: loaded")
    else
        __debug.debug_write = print
        term.set_term_color(colors.red)
        __debug.debug_write("debug: not loaded")
        term.set_term_color(colors.white)
    end
end

os.debug = __debug

term.clear()
term.setCursorPos(1,1)

--idle thread
local idle_function = function()
    while true do
        sleep(10)
    end
end

--finally, run the init process!
function init_fun()
    local init_proc = fork(kflag.init) --create a new process based on the running parent
    os.__init_process = init_proc

    prexec(init_proc, {kflag.sRunlevel}, nil, nil, nil, true)
end

function entropy_loader()
    loadmodule("entropyman", "/lib/random/entropyman.lua", false)
end

--create threads and allocate them in starting list
local idle_thread = libproc.thread.create_thread(idle_function, '-1:idle', -1, nil, 0.01)
local init_thread = libproc.thread.create_thread(init_fun, '1:init', 1, nil, 0.8)
local entropy_thread = libproc.thread.create_thread(entropy_loader, '0:entropy', 0, nil, 0.5)

--start all threads(using a dummy thread because yeah)
libproc.thread.start_thread(function()end, '-1:dummy', -1, nil, 0.005) --very low probability so it shouldn't run a lot

--if something goes wrong in kflag.init(such as kill or a monster), just halt
os.system_halt()

end

end

if kflag.splash then --bootsplash support
    if bootsplash then
        kflag.quiet = true
        bootsplash.load_normal()
    else
        ferror("splash: bootsplash not loaded at initramfs.")
        sleep(.5)
        kflag.quiet = false
        cubix.boot_kernel()
    end
else
    cubix.boot_kernel()
end

--if the boot_kernel() returns or something, just print a message saying it
print("cubix kernel: end of kernel execution.")
