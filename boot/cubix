#!/usr/bin/env lua
--cubix: well, cubix!

AUTHOR = "Lukas Mendes"
BUILD_DATE = "2015-10-13"
VERSION = "0.3.3"
--[[
    version: major.revision.minor
        major: linear
        revision: odd: unstable
        revision: even: stable
        minor: number of RELEASES necessary to get to this version, not including BUILDS
]]

local Args = {...} --arguments to shell

os.strsplit = function (inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    if inputstr == nil then
        return ''
    end
    local t={} ; i=1
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        t[i] = str
        i = i + 1
    end
    return t
end

kflag = {}

for k,v in pairs(Args) do
    if v == 'quiet' then
        kflag.quiet = true
    elseif v == 'nodebug' then
        kflag.nodebug = true
    elseif v == 'splash' then
        kflag.splash = true
    elseif string.sub(v, 0, 4) == 'init' then
        k = os.strsplit(v, '=')
        kflag.init = k[2]
    end
end

if kflag.init == nil then
    kflag.init = "/sbin/init"
end

os.__kflag = kflag

local pcid = fs.open("/var/pcid", 'w')
pcid.write(os.getComputerLabel())
pcid.close()

local version = fs.open("/proc/version", 'w')
version.write(VERSION)
version.close()

local build = fs.open("/proc/build_date", 'w')
build.write(BUILD_DATE)
build.close()

local sttime = fs.open("/proc/sttime", 'w')
sttime.write(tostring(os.time()))
sttime.close()

DEVICES = {}
MANAGED_FILES = {}
TTYS = {}

os.list_mfiles = {}

os.system_halt = function()
    os.sleep(1000000) --yea...
end

os.viewTable = function (t)
    for k,v in pairs(t) do
        print(k..","..tostring(v))
    end
end

os.runfile = shell.run

os.__clear_temporary = function()
    shell.run("rm /tmp")
    shell.run("mkdir /tmp")
end

os.safe_shutdown = function()
    debug.debug_write("[safe_shutdown] turning off...")
    debug.debug_write("[safe_shutdown] deleting /tmp")

    os.__clear_temporary()

    os.sleep(1)
    debug.debug_write("[safe_shutdown] sending HALT.")
    os.sleep(1)
    os.shutdown()
end

os.ferror = function(message)
    term.set_term_color(colors.red)
    print(message)
    term.set_term_color(colors.white)
end

os.safestr = function (s)
    if string.byte(s) > 191 then
        return '@'..string.byte(s)
    end
    return s
end

function strsplit(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t={} ; i=1
    for str in string.gmatch(inputstr, "([^" .. sep .. "]+)") do
        t[i] = str
        i = i + 1
    end
    return t
end

if os.loadAPI("/lib/video_manager") then
    print("loaded video")
end

if os.loadAPI("/lib/debug_manager") then
    debug = _G["debug_manager"]
    debug.debug_write("debug: loaded")
else
    debug.debug_write = print
    debug.debug_write("debug: not loaded")
end

if kflag.quiet then
    debug = {}
    debug.debug_write = function(x)end
end

os.debug = debug

debug.debug_write("Cubix version "..VERSION.." loading...")

if os.loadAPI("/lib/hash_manager") then
    hash = _G["hash_manager"]
    os.debug.debug_write("hash: loaded")
else
    os.debug.debug_write("hash: not loaded")
end

function register_device(d)
    os.debug.debug_write("[device_manager] "..d.name.." created")
    DEVICES[d.name] = d.device
    fs.open(d.name, 'w').close()
end

if os.loadAPI("/lib/device_manager") then
    devicemngr = _G["device_manager"]
    os.debug.debug_write("device_manager: loaded")
else
    os.debug.debug_write("device_manager: not loaded")
end

register_device(devicemngr._dev_random.dev_random)
register_device(devicemngr._dev_null.dev_null)
register_device(devicemngr._dev_zero.dev_zero)

os.list_devices = DEVICES

if os.loadAPI("/lib/fs_manager") then
    fs_mngr = _G["fs_manager"]
    os.debug.debug_write("fs_manager: loaded")
else
    os.debug.debug_write("fs_manager: not loaded")
end

function register_mfile(controller)
    debug.debug_write("[mfile] "..controller.name.." created")
    os.list_mfiles[controller.name] = controller.file
end

if os.loadAPI("/lib/proc_manager") then
    proc_mngr = _G["proc_manager"]
    os.debug.debug_write("proc_manager: loaded")
else
    os.debug.debug_write("proc_manager: not loaded")
end

register_mfile(proc_mngr.cpuinfo_file)
register_mfile(proc_mngr.temperature_file)

function register_tty(path, tty)
    TTYS[path] = tty
end

if os.loadAPI("/lib/tty_manager") then
    tty_mngr = _G["tty_manager"]
    os.debug.debug_write("tty_manager: loaded")
else
    os.debug.debug_write("tty_manager: not loaded")
end

register_tty("/dev/tty0", tty_mngr.new_tty("/dev/tty0"))
register_tty("/dev/tty1", tty_mngr.new_tty("/dev/tty1"))
register_tty("/dev/tty2", tty_mngr.new_tty("/dev/tty2"))
register_tty("/dev/tty3", tty_mngr.new_tty("/dev/tty3"))
register_tty("/dev/tty4", tty_mngr.new_tty("/dev/tty4"))
register_tty("/dev/tty5", tty_mngr.new_tty("/dev/tty5"))

term.set_term_color = function (c)
    if term.isColor() then
        term.setTextColor(c)
    end
end

if os.loadAPI("/lib/login_manager") then
    login_mngr = _G["login_manager"]
    os.debug.debug_write("login_manager: loaded")
else
    os.debug.debug_write("login_manager: not loaded")
end

if os.loadAPI("/lib/pipe_manager") then
    pipemngr = _G["pipe_manager"]
    os.debug.debug_write("pipe: loaded", false)
else
    os.debug.debug_write("pipe: not loaded")
end

os.pipemngr = pipemngr

os.pprint = function(message, pipe, double)
    if double == nil then double = false end
    if message == nil then message = '' end
    if pipe ~= nil then
        pipe:write(message..'\n')
        if double then
            print(message)
        end
    else
        print(message)
    end
end

--[[
pipemngr.test_pipe()
os.sleep(2)
]]

term.clear()
term.setCursorPos(1,1)

os.__debug_buffer = debug.__debug_buffer

os.__parent_init = os.new_process(kflag.init)
os.run_process(os.__parent_init)

os.safe_shutdown()
