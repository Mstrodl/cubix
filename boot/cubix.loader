#!/usr/bin/env lua

--[[

cubix.loader - bootstrap the initramfs and load kernel

]]

args = {...}

term.set_term_color = function (c)
    if term.isColor() then
        term.setTextColor(c)
    end
end

local function load_file(pth)
    -- just some tweaks to os.loadAPI
    local n = fs.getName(pth)
    if not fs.exists(pth) then
        ferror("load_file: "..pth.." doesn't exist")
        return false
    end

    local tEnv = {}
    setmetatable( tEnv, { __index = _G } )
    local fnAPI, err = loadfile( pth, tEnv )
    if fnAPI then
        local ok, err = pcall( fnAPI )
        if not ok then
            printError( err )
            return false
        end
    else
        printError( err )
        return false
    end

    local lib_exported = {}
    for k,v in pairs( tEnv ) do
        if k ~= "_ENV" then
            lib_exported[k] =  v
        end
    end

    return lib_exported
end

local initramfs = load_file('/boot/cubix-initramfs')

if initramfs then
    print("[bootstrap] loaded initramfs.")
else
    term.set_term_color(colors.red)
    print("[bootstrap] initramfs error, can't start kernel.")
    while true do sleep(0) end --hlt
end

print(table.unpack(args, 1))
os.run({}, '/boot/cubix.new', table.unpack(args, 1))

initramfs.cubix_boot_routine()

print("[bootstrap] hlt.")
while true do sleep(1000) end
