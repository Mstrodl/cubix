#!/usr/bin/env lua
--Simple Boot Loader

term.clear()
term.setCursorPos(1,1)

VERSION = '0.20'

function _halt()
    while true do os.sleep(0) end
end

function strsplit(inputstr, sep)
        if sep == nil then
                sep = "%s"
        end
        local t={} ; i=1
        for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                t[i] = str
                i = i + 1
        end
        return t
end

os.viewTable = function (t)
    print(t)
    for k,v in pairs(t) do
        print(k..","..tostring(v).." ("..type(v)..")")
    end
end

function tail(t)
       if # t <= 1 then
          return nil
       end
       local newtable = {}
       for i, v in ipairs(t) do
          if i > 1 then
              table.insert(newtable, v)
          end
       end
       return newtable
end

term.set_term_color = function (c)
    if term.isColor() then
        term.setTextColor(c)
    end
end

local function cprint(text)
    local x,y = term.getSize()
    local x2,y2 = term.getCursorPos()
    term.setCursorPos(math.ceil((x / 2) - (text:len() / 2)), y2)
    write(text..'\n')
end

function CUI(m)
    n=1
    l=#m
    while true do
        term.clear()
        term.setCursorPos(1,2)
        cprint("SBL "..VERSION)
        cprint("")
        for i=1, l, 1 do
            if i==n then
                cprint(i .. " ["..m[i].."]")
            else
                cprint(i .. " " .. m[i])
            end
        end
        cprint("")
        cprint("Select a OS to load")
        cprint("[arrow up/arrow down/enter]")
        local kpress = nil
        a, b= os.pullEventRaw()
        if a == "key" then
            if b==200 and n>1 then n=n-1 end
            if b==208 and n<l then n=n+1 end
            if b==28 then kpress = 'ENTER' break end
            if b==18 then kpress = 'e' break end
        end
    end
    term.clear()
    term.setCursorPos(1,1)
    return {n, kpress}
end

function read_osfile()
    local systems_file = fs.open("/boot/sblcfg/systems.cfg", 'r')
    local systems = strsplit(systems_file.readAll(), "\n")
    local i = 1
    local detected_oses_name = {}
    local detected_oses_path = {}
    print("reading systems.cfg...")
    for k,v in pairs(systems) do
        local sysdat = strsplit(systems[k], ';')
        detected_oses_name[i] = sysdat[1]
        detected_oses_path[i] = sysdat[2]
        print(sysdat[1]..' -> '..sysdat[2])
        i = i + 1
        os.sleep(.1)
    end
    systems_file.close()
    return {detected_oses_name, detected_oses_path}
end

local availablemods = {}
availablemods['kernel'] = true

local loadmods = {}

function loadkernel(kfile, memory)
    --loads a .lua kernel file with its main function
    --TODO lineboot: parse commands, like set, to boot from hdd and from disk!
    --TODO lineboot: actually make SBL more GRUB-like
    local sbl_env = {}
    local lFile = ''
    local _CHAINLOADER = false
    if kfile == 'lineboot' then
        while true do
            write("SBL:> ")
            local k = strsplit(read(), ' ')
            if k[1] == 'kernel' then
                if loadmods['kernel'] then
                    lFile = table.concat(tail(k), ' ')
                else
                    print("SBL: kernel not loaded")
                end
            elseif k[1] == 'boot' then
                break
            elseif k[1] == 'set' then
                local _d = strsplit(k[2], '=')
                local location = _d[1]
                local set = _d[2]
                sbl_env[location] = set
            elseif k[1] == 'chainloader' then
                if k[2] == '+1' then
                    _CHAINLOADER = true
                end
            elseif k[1] == 'halt' then
                _halt()
            elseif k[1] == 'insmod' then
                local module = k[2]
                if availablemods[module] ~= nil then
                    print("SBL: loaded "..module)
                    loadmods[module] = true
                else
                    print("SBL: module not found")
                end
            elseif l[1] == 'load_video' then
                term.clear()
                term.setCursorPos(1,1)
            end
        end
    else
        local handler = fs.open(kfile, 'r')
        if handler == nil then print("SBL: error opening bootscript") return 0 end
        local lines = strsplit(handler.readAll(), '\n')
        for _,v in ipairs(lines) do
            local k = strsplit(v, ' ')
            if k[1] == 'kernel' then
                if loadmods['kernel'] then
                    lFile = table.concat(tail(k), ' ')
                else
                    print("SBL: kernel not loaded")
                end
            elseif k[1] == 'boot' then
                break
            elseif k[1] == 'set' then
                local _d = strsplit(k[2], '=')
                local location = _d[1]
                local set = _d[2]
                sbl_env[location] = set
            elseif k[1] == 'chainloader' then
                if k[2] == '+1' then
                    _CHAINLOADER = true
                end
            elseif k[1] == 'halt' then
                _halt()
            elseif k[1] == 'insmod' then
                local module = k[2]
                if availablemods[module] ~= nil then
                    print("SBL: loaded "..module)
                    loadmods[module] = true
                else
                    print("SBL: module not found")
                end
            elseif k[1] == 'load_video' then
                term.clear()
                term.setCursorPos(1,1)
            end
        end
    end
    --print("SBL: loading \""..lFile.."\"")
    os.sleep(.5)
    local tArgs = strsplit(lFile, ' ')
    local sCommand = tArgs[1]
    local sFrom = ''
    if sbl_env['root'] == '(hdd)' then
        sFrom = ''
    elseif sbl_env['root'] == '(disk)' then
        sFrom = '/disk'
    else
        print("SBL: error parsing root")
        return 0
    end
    if _CHAINLOADER then
        print("sbl: chainloading.")
        os.run({}, sFrom..'/sstartup')
    end
    print("SBL: loading \""..sFrom..'/'..sCommand.."\"\n")
    if sCommand == '/rom/programs/shell' then
        shell.run("/rom/programs/shell")
    else
        os.run({}, sFrom..'/'..sCommand, table.unpack(tArgs, 2))
    end
end

term.setBackgroundColor(colors.white)
term.set_term_color(colors.black)
print("Welcome to SBL!\n")
term.set_term_color(colors.white)
term.setBackgroundColor(colors.black)
os.sleep(.5)

oses = read_osfile()
table.insert(oses[1], "SBL Command Line")
table.insert(oses[2], "lineboot")
local user_selection = CUI(oses[1]) --only names
selected_os = user_selection[1]

--load kernel
loadkernel(oses[2][selected_os], 512)

_halt()
