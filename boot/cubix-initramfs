#!/usr/bin/env lua
--libcubix: compatibility for cubix

AUTHOR = 'Lukas Mendes'
VERSION = '0.1'

--[[

Libcubix serves as a library that contains all the functions
that do not use any "cubix" thing(like ferror for example)

Libcubix is used in installation stage to create a cubix initramfs,
this servers as the basic functions that are needed in systemboot and
after it(os.strsplit, os.tail, etc.)

As there can be other versions of initramfs created by the community,
this version serves as the "official" libcubix and initramfs generator
for cubix.

Libcubix was created to make programs writed in Pure Lua to use some of
the functions in Cubix, without making the programs to be run at Cubix enviroment

]]

os.viewTable = function (t)
    if t == nil then return 0 end
    print(t)
    for k,v in pairs(t) do
        print(k..","..tostring(v).." ("..type(v)..")")
    end
end

os.tail = function(t)
    if # t <= 1 then
        return nil
    end
    local newtable = {}
    for i, v in ipairs(t) do
        if i > 1 then
            table.insert(newtable, v)
        end
    end
    return newtable
end

os.strsplit = function (inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    if type(inputstr) ~= 'string' then
        term.set_term_color(colors.red)
        print("os.strsplit: type(inputstr) == "..type(inputstr))
        term.set_term_color(colors.white)
        return 1
    end
    if inputstr == nil then
        return ''
    end
    local t={} ; i=1
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        t[i] = str
        i = i + 1
    end
    return t
end

function strcount(str, char)
    local c = 0
    for i=1, #str do
        local v = string.sub(str, i, i)
        if v == char then
            c = c + 1
        end
    end
    return c
end
_G['strcount'] = strcount

os.safestr = function (s)
    if string.byte(s) > 191 then
        return '@'..string.byte(s)
    end
    return s
end

os.generateSalt = function(l)
    if l < 1 then
        return nil
    end
    local res = ''
    for i = 1, l do
        res = res .. string.char(math.random(32, 126))
    end
    return res
end

function _prompt(message, yes, nope)
    write(message..'['..yes..'/'..nope..'] ')
    local result = read()
    if result == yes then
        return true
    else
        return false
    end
end

_G['prompt'] = _prompt

function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end
os.deepcopy = deepcopy
_G['deepcopy'] = deepcopy

function gethostname()
    local h = fs.open("/etc/hostname", 'r')
    if h == nil then
        return ''
    end
    local hstn = h.readAll()
    h.close()
    return hstn
end
_G['gethostname'] = gethostname

function generate_lcubix(type, path)
    if type == 'all' then
        local h = fs.open("/boot/libcubix", 'r')
        local all_lcubix = h.readAll()
        h.close()
        local h2 = fs.open(path, 'w')
        h2.write(all_lcubix)
        h2.close()
    end
end
