#!/usr/bin/env lua
--libcubix: compatibility for cubix

AUTHOR = 'Luna Mendes'
VERSION = '0.3'

--[[

Libcubix serves as a library that contains all the functions
that do not use any "cubix" thing(like ferror for example)

Libcubix is used in installation stage to create a cubix initramfs,
this servers as the basic functions that are needed in systemboot and
after it(os.strsplit, os.tail, etc.)

As there can be other versions of initramfs created by the community,
this version serves as the "official" libcubix and initramfs generator
for cubix.

Libcubix was created to make programs writed in Pure Lua to use some of
the functions in Cubix, without making the programs to be run at Cubix enviroment

]]

-- install compatibility between color and non-color computers
term.set_term_color = function (c)
    if term.isColor() then
        term.setTextColor(c)
    end
end

os.viewTable = function (t)
    if t == nil then return 0 end
    print(t)
    for k,v in pairs(t) do
        print(k..","..tostring(v).." ("..type(v)..")")
    end
end
_G['tview'] = os.viewTable

os.tail = function(t)
    if # t <= 1 then
        return nil
    end
    local newtable = {}
    for i, v in ipairs(t) do
        if i > 1 then
            table.insert(newtable, v)
        end
    end
    return newtable
end
_G['tail'] = os.tail

os.strsplit = function (inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    if type(inputstr) ~= 'string' then
        term.set_term_color(colors.red)
        print("os.strsplit: type(inputstr) == "..type(inputstr))
        term.set_term_color(colors.white)
        return 1
    end
    if inputstr == nil then
        return ''
    end
    local t={} ; i=1
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        t[i] = str
        i = i + 1
    end
    return t
end
_G['strsplit'] = os.strsplit

function strcount(str, char)
    local c = 0
    for i=1, #str do
        local v = string.sub(str, i, i)
        if v == char then
            c = c + 1
        end
    end
    return c
end
_G['strcount'] = strcount

os.safestr = function (s)
    if string.byte(s) > 191 then
        return '@'..string.byte(s)
    end
    return s
end

os.generateSalt = function(l)
    if l < 1 then
        return nil
    end
    local res = ''
    for i = 1, l do
        res = res .. string.char(math.random(32, 126))
    end
    return res
end

function _prompt(message, yes, nope)
    write(message..'['..yes..'/'..nope..'] ')
    local result = read()
    if result == yes then
        return true
    else
        return false
    end
end

_G['prompt'] = _prompt

function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
        setmetatable(copy, deepcopy(getmetatable(orig)))
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end
os.deepcopy = deepcopy
_G['deepcopy'] = deepcopy

function gethostname()
    local h = fs.open("/etc/hostname", 'r')
    if h == nil then
        return ''
    end
    local hstn = h.readAll()
    h.close()
    return hstn
end
_G['gethostname'] = gethostname

function class(base, init)
   local c = {}    -- a new class instance
   if not init and type(base) == 'function' then
      init = base
      base = nil
   elseif type(base) == 'table' then
    -- our new class is a shallow copy of the base class!
      for i,v in pairs(base) do
         c[i] = v
      end
      c._base = base
   end
   -- the class will be the metatable for all its objects,
   -- and they will look up their methods in it.
   c.__index = c

   -- expose a constructor which can be called by <classname>(<args>)
   local mt = {}
   mt.__call = function(class_tbl, ...)
   local obj = {}
   setmetatable(obj,c)
   if init then
      init(obj,...)
   else
      -- make sure that any stuff from the base class is initialized!
      if base and base.init then
      base.init(obj, ...)
      end
   end
   return obj
   end
   c.init = init
   c.is_a = function(self, klass)
      local m = getmetatable(self)
      while m do
         if m == klass then return true end
         m = m._base
      end
      return false
   end
   setmetatable(c, mt)
   return c
end
_G['class'] = class

function tmerge(t1, t2)
    for k,v in pairs(t2) do
        t1[k] = v
    end
    return t1
end
_G['tmerge'] = tmerge

function texists(el, tbl)
    for k,v in pairs(tbl) do
        if v == el then
            return true
        end
    end
end
_G['texists'] = texists

function table_gen(el, len)
    r = {}
    for i=1,len do
        r[i] = el
    end
    return r
end
_G['table_gen'] = table_gen

function table_fgen(func, len)
    r = {}
    for i=1,len do
        r[i] = func()
    end
    return r
end
_G['table_fgen'] = table_fgen

function tlength(tbl)
    local k = 0
    for i=1,#tbl do
        k = k + 1
    end
    return k
end
_G['tlength'] = tlength

function tsum(tbl)
    local r = 0
    for k,v in pairs(tbl) do
        r = r + v
    end
    return r
end
_G['tsum'] = tsum

function tviewnum(tbl)
    write('{')
    for k,v in ipairs(tbl) do
        write(" "..tonumber(v)..',')
    end
    write("}\n")
end
_G['tviewnum'] = tviewnum

function tmax(tbl)
    local tmp = tbl[1]
    for k,v in ipairs(tbl) do
        if tmp < v then
            tmp = v
        end
    end
    return tmp
end
_G['tmax'] = tmax

function tmin(tbl)
    local tmp = tbl[1]
    for k,v in ipairs(tbl) do
        if v < tmp then
            tmp = v
        end
    end
    return tmp
end
_G['tmin'] = tmin

function tstr(str)
    local t = {}
    str:gsub(".",function(c) table.insert(t,c) end)
    return t
end
_G['tstr'] = tstr

function reduce_add(seq, init_val)
    local accumulator = bigint.bigint(init_val)
    for k,v in ipairs(seq) do
        local num = bigint.bigint(tostring(v))
        accumulator = accumulator + num
    end
    return accumulator
end
_G['reduce_add'] = reduce_add

function reduce(f, seq, init_val)
    local acc = init_val
    for k,v in pairs(seq) do
        acc = f(acc, v)
    end
    return acc
end
_G['reduce'] = reduce

function generate_lcubix(type, path)
    if type == 'all' then
        local h = fs.open("/boot/libcubix", 'r')
        local all_lcubix = h.readAll()
        h.close()
        local h2 = fs.open(path, 'w')
        h2.write(all_lcubix)
        h2.close()
    end
end
