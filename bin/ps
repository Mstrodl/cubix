#!/usr/bin/env lua
--/bin/ps

function isin(inputstr, wantstr)
    for i = 1, #inputstr do
        local v = string.sub(inputstr, i, i)
        if v == wantstr then return true end
    end
    return false
end

function main(args)
    pipe = program_pipe
    if #args >= 1 then
        if isin(args[1], 'a') then
            flag_all_terminals = true
        elseif isin(args[1], 'x') then
            flag_all_proc = true
        elseif isin(args[1], 'o') then
            flag_show_ppid = true
        end
    end
    local procs = os.lib.proc.get_processes()
    --default action: show all processes from the current terminal
    if not flag_all_terminals and not flag_all_proc then
        local pcurrent_tty = os.lib.proc.filter_proc(os.lib.proc.FLAG_CTTY)
        print("PID  PROC")
        for _,v in pairs(pcurrent_tty) do
            print(v.pid.."  "..(v.file.." "..v.lineargs))
        end
    elseif flag_all_proc and not flag_all_terminals then
        local pallproc = os.lib.proc.filter_proc(os.lib.proc.FLAG_APRC)
        print("PID  PRNT  PROC")
        for _,v in pairs(pallproc) do
            if v.parent ~= nil then
                print(v.pid.."  "..(v.parent)..' > '..(v.file.." "..v.lineargs))
            else
                print(v.pid.."  "..(v.file.." "..v.lineargs))
            end
        end
    elseif not flag_all_proc and flag_all_terminals then
        --print('all tty')
        local palltty = os.lib.proc.filter_proc(os.lib.proc.FLAG_ATTY)
        print("PID  PRNT  PROC")
        for _,v in pairs(palltty) do
            if v.parent ~= nil then
                print(v.pid.."  "..(v.parent)..' > '..(v.file.." "..v.lineargs))
            else
                print(v.pid.."  "..(v.file.." "..v.lineargs))
            end
        end
    end
end

main({...})
