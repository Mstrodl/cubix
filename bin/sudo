#!/usr/bin/env lua
--/bin/sudo: grants access to run programs in /sbin
-- so, yes, Cubix has some security flaws, and one of these flaws is
-- to run /sbin programs using shell.run, and shellapi does not give a
-- single fuck to Cubix permissions, only /bin/wshell uses some kind of
-- "if you're root, i will run, if not, fuck you" strategy
-- and this is not good because of the point described here
-- and because of this point sudo can be created without fs_manager
-- craziness.

if os.loadAPI("/lib/debug_manager") then
    debug = _G["debug_manager"]
    debug.debug_write("debug: loaded", false)
else
    debug.debug_write = print
    debug.debug_write("debug: not loaded")
end

_handler = {}
_handler.signal_handler = function (sig)
    if sig == 'kill' then
        debug.debug_write("sudo: SIGKILL'd!", false)
        return 0
    end
end

if os.loadAPI("/lib/login_manager") then
    loginmngr = _G["login_manager"]
else
    print("cannot load login_manager")
    exit()
end

function main(_args)
    write("Password: ")
    local try_pwd = read('')

    if loginmngr.login('root', try_pwd) then
    else
        print("erroneus user or password.")
        return 0
    end

    function tail(t)
       if # t <= 1 then
          return nil
       end
       local newtable = {}
       for i, v in ipairs(t) do
          if i > 1 then
              table.insert(newtable, v)
          end
       end
       return newtable
    end

    local program = _args[1]
    local args = tail(_args)
    --if args ~= nil then
    --    args = ' ' .. table.concat(args, " ")
    --else
    --    args = ''
    --end

    local h = fs.open("/tmp/current_path", 'r')
    local current_path = h.readAll()
    h.close()

    if fs.exists(program) then
        os.runfile_proc(program, args)
    elseif fs.exists(fs.combine(current_path, program)) then
        os.runfile_proc(fs.combine(current_path, program), args)
    elseif fs.exists(fs.combine("/bin/", program)) then
        os.runfile_proc(fs.combine("/bin/", program), args)
    elseif fs.exists(fs.combine("/sbin/", program)) then
        os.runfile_proc(fs.combine("/sbin/", program), args)
    end
end


