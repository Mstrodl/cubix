#!/usr/bin/env lua
--/bin/sudo: grants access to run programs in /sbin
-- so, yes, Cubix has some security flaws, and one of these flaws is
-- to run /sbin programs using shell.run, and shellapi does not give a
-- single fuck to Cubix permissions, only /bin/wshell uses some kind of
-- "if you're root, i will run, if not, fuck you" strategy
-- and this is not good because of the point described here
-- and because of this point sudo can be created without fs_manager
-- craziness.

if os.loadAPI("/lib/login_manager") then
    loginmngr = _G["login_manager"]
else
    print("cannot load login_manager")
    exit()
end

local _args = {...}

write("Password: ")
try_pwd = read('')

if loginmngr.login('root', try_pwd) then
else
    print("erroneus user or password.")
    return 0
end

function tail(t)
   if # t <= 1 then
      return nil
   end
   local newtable = {}
   for i, v in ipairs(t) do
      if i > 1 then
          table.insert(newtable, v)
      end
   end
   return newtable
end

program = _args[1]
args = tail(_args)
if args ~= nil then
    args = ' ' .. table.concat(args, " ")
else
    args = ''
end

h = fs.open("/tmp/current_path", 'r')
current_path = h.readAll()
h.close()

if fs.exists(program) then
    shell.run(program .. args)
elseif fs.exists(fs.combine(current_path, program)) then
    shell.run(fs.combine(current_path, program) .. args)
elseif fs.exists(fs.combine("/bin/", program)) then
    shell.run(fs.combine("/bin/", program) .. args)
elseif fs.exists(fs.combine("/sbin/", program)) then
    shell.run(fs.combine("/sbin/", program) .. args)
end



