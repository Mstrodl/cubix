#!/usr/bin/env lua
--/bin/sudo: grants access to run programs in /sbin

_handler = {}
_handler.signal_handler = function (sig)
    if sig == 'kill' then
        os.debug.debug_write("sudo: SIGKILL'd!", false)
        return 0
    end
end

local __sudo_lock = true

function sudo_error(msg)
    ferror(msg)
    os.lib.login.close_sudo()
end

function run_program(_args)
    local program = _args[1]
    if program == nil then return 0 end
    local args = os.tail(_args)

    local h = fs.open("/tmp/current_path", 'r')
    local current_path = h.readAll()
    h.close()

    local found = false
    if fs.exists(program) then
        found = true
        os.runfile_proc(program, args)
    elseif fs.exists(fs.combine(current_path, program)) then
        found = true
        os.runfile_proc(fs.combine(current_path, program), args)
    end

    local _path = os.strsplit(os.cshell.PATH, ':')
    for k,v in ipairs(_path) do
        local K = fs.combine(v..'/', program)
        if fs.exists(K) then
            found = true
            os.runfile_proc(K, args)
        end
    end

    if fs.exists(fs.combine("/sbin/", program)) then
        found = true
        os.runfile_proc(fs.combine("/sbin/", program), args)
    end
    if not found then
        os.ferror("sudo: Program not found")
    end
    return 0
end

function main(args)
    os.lib.login.alert_sudo()
    local current_user = os.lib.login.currentUser()
    local isValid = os.lib.login.general_verify(current_user)
    --if valid, verify if current user can run programs with UID=0
    if isValid then
        if os.lib.login.sudoers_verify_user(current_user, 'root') then
            os.lib.login.use_ctok()
            run_program(args)
        else
            sudo_error("sudo: "..current_user.." is not in the sudoers file")
            return 1
        end
    else
        if os.lib.login.sudoers_verify_user(current_user, 'root') then
            if os.lib.login.front_login('sudo', current_user) then
                --os.lib.login.use_ctok()
                run_program(args)
            else
                sudo_error("sudo: Login incorrect")
                return 1
            end
        else
            sudo_error("sudo: "..current_user.." is not in the sudoers file")
            return 1
        end
    end
    os.lib.login.close_sudo()
    return 0
end

main({...})
