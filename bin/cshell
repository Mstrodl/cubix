#!/usr/bin/env lua
--/bin/wshell: cubix shell

_handler = {}
_handler.signal_handler = function (sig)
    if sig == 'kill' then
        print("cshell: recieved SIGKILL")
        return 0
    end
end

function strsplit(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t={} ; i=1
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        t[i] = str
        i = i + 1
    end
    return t
end

local cuser = fs.open("/tmp/current_user", 'r')
local cpath = fs.open("/tmp/current_path", 'r')
current_user = cuser.readAll()
current_path = cpath.readAll()
cuser.close()
cpath.close()

--term.clear()
--term.setCursorPos(1,1)

--cur_tty = os.lib.tty.getcurrentTTY()

os.cshell = {}
os.cshell.PATH = '/bin:/usr/bin'

os.cshell.getpwd = function()
    local handler = fs.open("/tmp/current_path", 'r')
    local result = handler.readAll()
    handler.close()
    return result
end

os.cshell.resolve = function(pth)
    local current_path = os.cshell.getpwd()
    function _combine(c) return current_path .. '/' .. c end
    function check_slash(s) return string.sub(s, 1, 1) == '/' end
    if check_slash(pth) then
        return pth
    else
        return _combine(pth)
    end
end

function shell_command(k)
    --TODO: add support for & (multitasking)
    if k == nil or k == "" then return 0 end
    for _, k in pairs(os.strsplit(k, "&&")) do
    if k:find("|") then
        local count = 1
        local programs = os.strsplit(k, "|")
        local npipe = os.lib.pipe.Pipe.new('main')
        for k,v in pairs(programs) do
            local c = os.strsplit(v, ' ')
            local program = c[1]
            local pargs = {}
            for k,v in pairs(c) do
                if v ~= program then
                    pargs[#pargs+1] = tostring(v)
                end
            end

            local found = false
            if fs.exists(program) then
                found = true
                os.runfile_proc(program, pargs, nil, npipe)

            elseif fs.exists(fs.combine(current_path, program)) then
                found = true
                os.runfile_proc(fs.combine(current_path, program), pargs, nil, npipe)
            end

            local _path = os.strsplit(os.cshell.PATH, ':')
            for k,v in ipairs(_path) do
                local K = fs.combine(v..'/', program)
                if fs.exists(K) then
                    found = true
                    os.runfile_proc(K, pargs, nil, npipe)
                end
            end

            if fs.exists(fs.combine("/sbin/", program)) then
                if current_user == "root" then
                    found = true
                    os.runfile_proc(fs.combine("/sbin/", program), pargs, nil, npipe)
                end
            end
            if not found then
                os.ferror("cshell: Program not found")
            end
        end
    else
        local c = strsplit(k, " ")
        local program = c[1]
        if program == 'echo' then
            args = strsplit(k, ';')
            print(args[2])
            return 0
        elseif program == 'APATH' then
            args = strsplit(k, ' ')
            os.cshell.PATH = os.cshell.PATH .. ':' .. args[2]
            return 0
        elseif program == 'PPATH' then
            print(os.cshell.PATH)
            return 0
        elseif program == "getuid" then
            print(os.lib.login.currentUser().uid)
            return 0
        elseif program == 'getperm' then
            permission.getPerm()
            return 0
        end
        local args = {}
        for k,v in pairs(c) do
            if v == program then
            else
                args[#args+1] = v
            end
        end
        local found = false
        if fs.exists(program) then
            _l = os.strsplit(program, '/')
            if _l[1] ~= 'sbin' then
                found = true
                os.runfile_proc(program, args)
            end

        elseif not found and fs.exists(fs.combine(current_path, program)) then
            print(current_path)
            if current_path ~= '/sbin' or current_path ~= 'sbin' then
                found = true
                os.runfile_proc(fs.combine(current_path, program), args)
            end
        end

        local _path = os.strsplit(os.cshell.PATH, ':')
        for k,v in ipairs(_path) do
            local K = fs.combine(v..'/', program)
            if not found and fs.exists(K) then
                found = true
                os.runfile_proc(K, args)
            end
        end

        if not found and fs.exists(fs.combine("/sbin/", program)) then
            if current_user == "root" then
                found = true
                os.runfile_proc(fs.combine("/sbin/", program), args)
            end
        end

        if not found then
            os.ferror("cshell: Program not found")
        end
    end
    end
end

os.cshell.__shell_command = shell_command
os.cshell.complete = function()
    --return fs.complete(current_path)
end

function main(args)
    --TODO: -c
    if fs.exists("/tmp/install_lock") then
        term.set_term_color(colors.green)
        print("Hey, it seems that you installed cubix recently, do you know you can create a new user using 'sudo adduser' in the shell, ok?(remember that the default password is 123)")
        term.set_term_color(colors.white)
        fs.delete("/tmp/install_lock")
    end
    local command = ""
    local HISTORY = {}
    if #args > 0 then
        local ecmd = args[1]
        print(ecmd)
        print(string.sub(ecmd, 1, #ecmd -1))
        os.runfile(ecmd)
        return 0
    end
    while true do
        local cuser = fs.open("/tmp/current_user", 'r')
        local cpath = fs.open("/tmp/current_path", 'r')
        current_user = cuser.readAll()
        current_path = cpath.readAll()
        cuser.close()
        cpath.close()
        if current_user == 'root' then
            shell_char = '# '
        else
            shell_char = '$ '
        end
        write(current_user .. ':' .. current_path .. shell_char)
        command = read(nil, HISTORY, os.cshell.complete)
        table.insert(HISTORY, command)
        if command == "exit" then
            return 0
        elseif command ~= nil then
            shell_command(command)
        end
    end
    return 0
end

--os.sleep(3)
