#!/usr/bin/env lua
--/bin/lx: manages luaX in user(spaaaaaaaaace)

_handler = {}
_handler.signal_handler = function (sig)
    if sig == 'kill' then
        os.debug.debug_write("lx frontend: ded", false)
        return 0
    end
end

function lx_start_default()
    --this is the default routine to start luaX with lxterm
    os.debug.debug_write("[lx] starting")
    os.internals.loadmodule("lx", "/lib/luaX/lx.lua")
    os.internals.loadmodule("lxServer", "/lib/luaX/lxServer.lua")
    os.internals.loadmodule("lxClient", "/lib/luaX/lxClient.lua")
    os.internals.loadmodule("lxWindow", "/lib/luaX/lxWindow.lua")
    os.internals.loadmodule("lxMouse", "/lib/luaX/lxMouse.lua")
    local lxterm = os.lib.lxWindow.Window.new("/g/lxterm/lxterm.lxw")
    os.lib.lx.blank()
    os.lib.lxClient.loadWindow(lxterm)
    sleep(2)
end

function lx_stop_default()
    os.internals.unloadmod("lx")
    os.internals.unloadmod("lxServer")
    os.internals.unloadmod("lxClient")
    os.lib.lxWindow.unload_all()
    os.internals.unloadmod("lxWindow")
    os.internals.unloadmod("lxMouse")
    return 0
end

function usage()
    print("lx <argument> <...>")
    print("argument: load start status stop mods demo")
end

function main(args)
    if os.lib.lx then
        print("lx ".._LUAX_VERSION)
    else
        print("lx frontend (backend not loaded)")
    end
    if args[1] == 'daemon' then
        print("lx: starting as daemon")
        os.viewLoadedMods()
    elseif args[1] == 'help' then
        usage()
    elseif args[1] == 'load' then
        --load windows here
        if os.lib.lxServer and os.lib.lxClient and os.lib.lxWindow then
            local lwindow = os.lib.lxWindow.Window.new(os.cshell.resolve(args[2]))
            os.lib.lxClient.loadWindow(lwindow)
        else
            os.ferror("lx: cannot load windows without lxServer, lxClient and lxWindow loaded")
            return 1
        end
    elseif args[1] == 'start' then
        if os.lib.login.currentUser().uid == 0 then
            os.ferror("lx: cannot start luaX while root")
            return 1
        end
        if os.lib.lx then
            if prompt("luaX backend already started, want to restart?\n", 'Y', 'n') then
                os.debug.debug_write("[lx] restarting")
                lx_stop_default()
                lx_start_default()
            end
        else
            lx_start_default()
        end
    elseif args[1] == 'mods' then
        if os.lib.lx then
            print("luaX loaded modules:")
            term.set_term_color(colors.green)
            for k,v in pairs(os.lib) do
                if string.sub(k, 1, 2) == 'lx' then
                    write(k..' ')
                end
            end
            write('\n')
            term.set_term_color(colors.white)
        else
            ferror("lx: luaX not loaded")
        end
    elseif args[1] == 'status' or args[1] == nil then
        if os.lib.lx then
            write("lx status: "..(os.lib.lx.get_status())..'\n')
        else
            write("lx backend not running\n")
        end
    elseif args[1] == 'demo' then
        if os.lib.lx then
            os.lib.lx.blank()
            os.lib.lx.demo()
            os.lib.lxServer.sv_demo()
            os.lib.lx.blank()
            local lxterm = os.lib.lxWindow.Window.new("/g/lxterm/lxterm.lxw")
            os.lib.lxClient.loadWindow(lxterm)
        else
            ferror("lx: lx backend not running\n")
        end
    elseif args[1] == 'stop' then
        os.debug.debug_write("[lx] stopping")
        lx_stop_default()
    end
end
