#!/usr/bin/env lua
--/bin/hashrate_test

--livre,
hc = 1
seconds = 0

function hashing_start()
    print("hashing_start here")
    while true do
        local k = os.lib.hash.hash.sha256('constant1' .. 'constant2' .. tostring(hc))
        write(k..'\n')
        hc = hc + 1
        sleep(0)
    end
    print("hashing_start ded")
end

function hashing_count()
    print("hashing_count here")
    while true do
        local hrate = hc / seconds
        term.set_term_color(colors.red)
        term.setCursorPos(1,1)
        print("hashrate: "..tostring(hrate)..' h/s')
        term.set_term_color(colors.white)
        seconds = seconds + 1
        sleep(1)
    end
    print("hashing_count ded")
end

function main(args)
    print("starting Hashrate program")
    local seconds = 0
    os.startThread(hashing_count)
    os.startThread(hashing_start)
    return 0
end

--thread API
local threads = {}
local starting = {}
local eventFilter = nil

rawset(os, "startThread", function(fn, blockTerminate)
        table.insert(starting, {
                cr = coroutine.create(fn),
                blockTerminate = blockTerminate or false,
                error = nil,
                dead = false,
                filter = nil
        })
end)

local function tick(t, evt, ...)
        if t.dead then return end
        if t.filter ~= nil and evt ~= t.filter then return end
        if evt == "terminate" and t.blockTerminate then return end

        coroutine.resume(t.cr, evt, ...)
        t.dead = (coroutine.status(t.cr) == "dead")
end

local function tickAll()
        if #starting > 0 then
                local clone = starting
                starting = {}
                for _,v in ipairs(clone) do
                        tick(v)
                        table.insert(threads, v)
                end
        end
        local e
        if eventFilter then
                e = {eventFilter(coroutine.yield())}
        else
                e = {coroutine.yield()}
        end
        local dead = nil
        for k,v in ipairs(threads) do
                tick(v, unpack(e))
                if v.dead then
                        if dead == nil then dead = {} end
                        table.insert(dead, k - #dead)
                end
        end
        if dead ~= nil then
                for _,v in ipairs(dead) do
                        table.remove(threads, v)
                end
        end
end

rawset(os, "setGlobalEventFilter", function(fn)
        if eventFilter ~= nil then error("This can only be set once!") end
        eventFilter = fn
        rawset(os, "setGlobalEventFilter", nil)
end)

if type(main) == "function" then
        os.startThread(main)
else
        os.startThread(function() shell.run("shell") end)
end

while #threads > 0 or #starting > 0 do
        tickAll()
end
