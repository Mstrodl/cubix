#!/usr/bin/env lua
--[[
    yapi2 - 2nd yapi
]]

VERSION = '0.3.0'

local libyap = cubix.load_file("/lib/ext/libyap.lua")
local common = cubix.load_file("/lib/ext/yapi_common.lua")

function print_cl(cl, str)
    term.set_term_color(cl)
    print(str)
    term.set_term_color(colors.white)
end

function msg_normal(str)
    print_cl(colors.yellow, rprintf(":: %s", str))
end

function msg_ct(str)
    print_cl(colors.yellow, rprintf(" -> %s", str))
end

function msg_success(str)
    print_cl(colors.green, rprintf("[V] %s", str))
end

function msg_error(str)
    print_cl(colors.red, rprintf("[X] %s", str))
end

function main(args)
    if lib.pm.currentuid() ~= 0 then
        ferror("yapi must be run as uid 0, not uid "..tostring(lib.pm.currentuid()))
        return 1
    end

    libyap.test()

    local yapi_db = common.Yapidb()

    if args[1] == '--init' then
        msg_normal("Initializing yapi structure")
        if common.yapi_mk_struct() then
            msg_success("Initialized yapi structure")
        end

        msg_normal("Loading local file")
        if not yapi_db:_load_local() then
            msg_ct("Error loading, creating empty local file")
            if yapi_db:_save_local() then
                msg_success("Local file created")
            else
                msg_error("Error creating local file")
            end
        else
            msg_ct("local file loaded, no action needed")
        end
    end

    if not common.yapi_check_struct() then
        msg_error("error checking yapi structure")
        return ferror("run yapi --init")
    end

    if #args == 0 then
        print("usage: yapi <args...>")
        return 0
    end

    -- load /var/yapi/local
    yapi_db:load_local()

    local mode = args[1]
    local arguments = table.tail(args)
    if string.sub(mode, 1, 1) == '-' then
        if not yapi_db:usual_check() then
            return ferror("error found in usual check, cannot continue")
        end

        if string.sub(mode, 2, 2) == 'S' then
            --[[
                first check for options, then install packages
            ]]

            if string.isin(mode, 'y') then
                if not http then
                    return abort("http not enabled")
                end
                msg_normal("Updating package database")
                if not common.yapi_update_repos() then
                    return msg_error("Error updating package database")
                end
            end

            if string.isin(mode, 'u') then
                --full system upgrade
                printf(":: Starting full system upgrade")
                yapi_db:upgrade_all()
            end

            --clear cache(not a good option)
            if string.isin(mode, 'c') then
                if not prompt(":: Proceed with cache clean(not recommended)?", "Y", "n") then
                    return msg_error("cache_clean_prompt")
                end
                yapi_db:clear_cache()
            end

            -- if any package is passed on, install it
            if arguments ~= nil then
                --check if all packages exist
                for _,pkg in ipairs(arguments) do
                    if yapi_db:find(pkg) == false then
                        return ferror("error: target not found: "..pkg)
                    end
                end

                --sanity check, installing already installed packages
                for _,pkg in ipairs(arguments) do
                    if ydb:is_installed(pkg) then
                        warning(common.yapi_mkstr(pkg)..' already installed - reinstalling')
                    end
                end

                --get deps
                print("resolving dependencies...")
                local packages = yapi_db:get_deps(arguments)
                print("")
                if packages == nil then
                    return ferror("yapi: error getting dependencies")
                end

                --Cubix Standard rule 1 check
                if inlist('base', packages) then
                    ferror("WARNING: As Cubix Standards, devs should not install the base package as it will damage existing changes that they made.")
                    ferror("\nWARNING2: Only users with consent that all personal data will be lost after installation should continue.")
                    ferror("To upgrade the system, use cubixli.")
                    if prompt("Do you really want to go with this?", "Y", "n") then
                        if prompt("Do you REALLY want to go with this?", "Y", "n") then
                            print("Ok then... don't issue this at github, pls.")
                        end
                        return abort("base_warning")
                    else
                        return abort("base_warning")
                    end
                end

                --user consent
                write("Packages ("..#packages..") ")
                for _,pkg in ipairs(packages) do
                    write(common.yapi_mkstr(pkg)..' ')
                end
                print("\n")
                if not prompt(":: Proceed with installation?", "Y", "n") then
                    return abort("install_prompt")
                end

                --installing.
                yapi_db:job_set(packages)
                extnr("Installing "..#packages.." package(s)")
                for _, package in ipairs(packages) do
                    if yapi_db:install(package) then
                        yapi_db:job_status("SUCCESS")
                        yapi_db:job_next()
                    else
                        return abort("install_error")
                    end
                end
            end

        elseif string.sub(mode, 2, 2) == 'R' then
            --call cache file and remove files based on it
            local packages = arguments
            if packages ~= nil then

                --[[for k,pkg in ipairs(packages) do
                    if not yapi_db:find(pkg) then
                        ferror("error: target not found: "..pkg)
                        return 1
                    end
                end]]

                --checking if all packages exist
                for k,pkg in ipairs(packages) do
                    if not ydb:is_installed(pkg) then
                        return ferror("error: "..pkg.." not installed")
                    end
                end

                write("Packages ("..#packages..") ")
                for _,pkg in ipairs(packages) do
                    write(pkg..' ')
                end
                print("\n")

                if not prompt("Proceed with removal?", "Y", "n") then
                    return abort("remove_prompt")
                end

                --setting jobs and removing each one
                yapi_db:job_set(packages)
                print_color(":: Removing ", colors.yellow)
                for _,package in ipairs(packages) do
                    if yapi_db:remove(package) then
                        yapi_db:job_status("SUCCESS")
                        yapi_db:job_next()
                    else
                        return ferror("[remove] "..package.." : FAILURE")
                    end
                end
            end

        elseif string.sub(mode, 2, 2) == 'Q' then
            --query database and see details of packages

            --get list of all packages installed
            if isin(mode, 'e') then
                -- binfo = bscinfo
                local ipkg = yapi_db:binfo_installed()
                for _,v in ipairs(ipkg) do
                    print(v)
                end
                return 0
            end

            local pkg = arguments[1]

            if not yapi_db:find(pkg) then
                return ferror("error: target not found: "..pkg)
            end

            local pkg_repo = yapi_db:r_find(pkg)
            local pkgd = yapi_db:get_data(pkg_repo, pkg)

            --show basic data
            print()
            write_color(pkg_repo, colors.yellow)
            write('/'..pkgd.name)
            write(' v'..pkgd.version)
            write_color(' b'..pkgd.build, colors.blue)
            print_color(' ('..pkgd.license..')', colors.red)

            --maintainer and email
            --print()
            --write("Maintainer: ")
            --write_color(ydata.author..' <'..ydata['email-author']..'>', colors.green)

            --description of package
            print()
            print_color("Description: "..pkgd.desc, colors.orange)
            --print("URL: "..ydata.url) --package url

        elseif string.sub(mode, 2, 2) == 'U' then
            --install a package from its yap file

            --open the file
            local p = fs_resolve(arguments[1])

            if not fs.exists(p) then
                return ferror("yapi: file does not exist")
            end

            local fdt = fs_readall(p)
            if not fdt then
                return ferror("yapi: error reading file")
            end

            --parse the given file
            local ydata = libyap.parse_yap(fdt)
            if not libyap.check_yap(ydata) then
                return ferror("check: error checking yap data")
            end

            local packages = {ydata['name']}

            write("Packages ("..#packages..") ")
            for _,pkg in ipairs(packages) do
                write(pkg..' ')
            end
            print("\n")
            if not prompt(":: Proceed with installation?", "Y", "n") then
                print("==> Aborted")
                return true
            end

            --setting jobs and installing
            yapi_db:job_set(packages)
            if yapi_db:install_yap(ydata, 'manual') then
                nr("Done.")
            else
                return ferror("[install_yap:error] "..ydata['name'])
            end

        elseif string.sub(mode, 2, 2) == 'F' then
            --get package yap from cache(if not download it)
            --and show the files that it owns

            --same code from -Q
            if isin(mode, 'l') then
                local pkg = arguments[1]

                local find_data = yapi_db:find(pkg)
                if not find_data then
                    return ferror("error: target not found: "..pkg)
                end

                local pkg_repo = find_data[1]
                local pkgd = yapi_db:get_data(pkg_repo, pkg)

                if not pkgd['installed'] then
                    return ferror("error: package not installed")
                end

                local _c = common.yapi_get_cache(pkg, pkgd['build'])
                if not _c then
                    return ferror("cached file not found")
                end

                local yapdata = libyap.parse_yap(_c)
                for k,v in pairs(yapdata['files']) do
                    print(pkg.." "..k)
                end

            end
        end
    else
        return ferror("yapi: sorry, see \"man yapi\" for details")
    end
end

main({...})
