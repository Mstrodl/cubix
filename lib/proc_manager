#!/usr/bin/env lua
--proc manager
--task: manage /proc, creating its special files;
--manage processes, threads and signals to processes.

RELOADABLE = false

function strsplit(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t={} ; i=1
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        t[i] = str
        i = i + 1
    end
    return t
end

os.processes = {}
os.pid_last = 0

running = 0

os.signals = {}
os.signals.SIGKILL = 0
os.signals.SIGINT = 2
os.signals.SIGQUIT = 3
os.signals.SIGILL = 4 --illegal instruction
os.signals.SIGFPE = 8
os.signals.SIGTERM = 15 --termination

os.sys_signal = function (signal)
    --this just translates the recieved signal to a printable string
    local signal_str = ''
    if signal == os.signals.SIGILL then
        signal_str = 'Illegal instruction'
    elseif signal == os.signals.SIGFPE then
        signal_str = 'Floating Point Exception'
    end
    ferror(signal_str)
    return 0
end

os.call_handle = function(process, handler)
    if process.rfile ~= nil then
        r = process.rfile
        if r._handler then
            r._handler.signal_handler(handler)
        else
            os.debug.debug_write("[proc_handler] "..process.file.." does not have a signal handler, ignoring it")
        end
    else
        os.debug.debug_write("[proc_handler] "..process.file.." does not have anything to show, ignoring it", false)
    end
end

os.send_signal = function (proc, signal)
    if proc == nil then
        os.ferror("proc.send_signal: process == nil")
    elseif proc == -1 then
        os.ferror("proc.send_signal: process was killed")
    elseif signal == os.signals.SIGKILL then
        os.debug.debug_write("[proc_manager] "..proc.file.." recieved SIGKILL.", false)
        os.processes[proc.pid] = -1 --removing anything related to the process in os.processes
        for k,v in pairs(proc.childs) do
            os.terminate(v)
        end
        os.terminate(proc)
    end
end

function __killallproc()
    --os.viewTable(os.processes)
    for k,v in ipairs(os.processes) do
        if v ~= -1 then
            os.send_signal(v, os.signals.SIGKILL)
        end
    end
end

os.terminate = function (p)
    os.call_handle(p, "kill")
    p = nil
    --os.sleep(1)
end

os.getrunning = function()
    return running
end

os.run_process = function(p, args, pipe)
    if args == nil then args = {} end
    --if pipe == nil then pipe = {} end
    os.debug.debug_write("[process] running "..p.file.." pid="..tostring(p.pid), false)
    permission.default()
    os.processes[p.pid] = p
    running = p.pid
    p.uid = os.lib.login.currentUser().uid
    if os.loadAPI(p.file) then
        K = strsplit(p.file, '/')
        p.rfile = _G[K[#K]] --non-localized variables in _G
        if p.rfile.main ~= nil and type(p.rfile.main) == 'function' then
            p.rfile.main(args, pipe)
        else
            os.debug.debug_write("[process] cannot call main() from "..p.file)
        end
    else
        os.debug.debug_write("[process] cannot load "..p.file)
    end
    os.send_signal(p, os.signals.SIGKILL)
end

os.set_child = function(prnt, proc)
    prnt.childs[#prnt.childs + 1] = proc
end

os.set_parent = function(proc, parent)
    os.set_child(parent, proc)
    proc.parent = parent.file
end

os.new_process = function(executable)
    local cls = {}
    os.pid_last = os.pid_last + 1
    cls.pid = os.pid_last
    cls.file = executable
    cls.parent = nil
    cls.childs = {}
    cls.rfile = nil
    cls.uid = -1
    os.debug.debug_write("[proc_manager] new process: "..cls.file, false)
    return cls
end

os.currentUID = function()
    local runningproc = os.processes[running]
    if runningproc == nil or runningproc == -1 then
        return nil
    else
        return runningproc.uid
    end
end

os.runfile_proc = function(executable, arguments, parent, pipe)
    if parent == nil then
        _parent = os.__parent_init --making sure /sbin/init is parent of all processes
    end
    if arguments == nil then arguments = {} end
    --if pipe == nil then pipe = pipemngr.new_pipe("empty") end
    _process = os.new_process(executable) --creating a process
    os.set_parent(_process, _parent) --making parenting possible
    os.run_process(_process, arguments, pipe) -- running
    --os.send_signal(_process, os.signals.SIGKILL) --killing after its task is done
end

function test_processes()
    p1 = os.new_process("/sbin/init")
    os.run_process(p1)
    os.send_signal(p1, os.signals.SIGKILL)
end

--test_processes()

cinfo = [[processor       : 0
vendor_id       : ComputerCraft
cpu family      : -1
model           : 17
model name      : ComputerCraft CraftCPU @ TickGHZ
stepping        : 0
microcode       : 0x17
cpu MHz         : 1
cache size      : 0 KB
physical id     : 0
siblings        : 1
core id         : 0
cpu cores       : 1
apicid          : 0
initial apicid  : 0
fpu             : yes
fpu_exception   : yes
cpuid level     : -1
wp              : yes
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer xsave avx f16c rdrand lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms
bogomips        : 0
clflush size    : 0
cache_alignment : 32
address sizes   : 36 bits physical, 48 bits virtual
power management:
]]

function CPUINFO()
    return cinfo
end

cpuinfo_file = {}
cpuinfo_file.name = "/proc/cpuinfo"
cpuinfo_file.file = {}
cpuinfo_file.file.write = function(data)
    os.ferror("cannot write to /proc/cpuinfo")
end

cpuinfo_file.file.read = function(bytes)
    if bytes == nil then
        return CPUINFO()
    else
        return string.sub(CPUINFO(), 0, bytes)
    end
end

temperature_file = {}
temperature_file.name = "/proc/temperature"
temperature_file.file = {}
temperature_file.file.write = function(data)
    os.ferror("cannot write to /proc/temperature")
end

temperature_file.file.read = function(bytes)
    return 'computer: 30C'
end

partitions_file = {}
partitions_file.name = "/proc/partitions"
partitions_file.file = {}
partitions_file.file.write = function(data)
    os.ferror("cannot write to /proc/partitions")
end

partitions_file.file.read = function(bytes)
    k = [[major minor  #blocks name
8      0      1024876  hda]]
    if bytes == nil then
        return k
    else
        return string.sub(k, 0, bytes)
    end
end

function libroutine()
    os.internals._kernel.register_mfile(cpuinfo_file)
    os.internals._kernel.register_mfile(temperature_file)
    os.internals._kernel.register_mfile(partitions_file)
end
