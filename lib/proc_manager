#!/usr/bin/env lua
--proc manager
--task: manage /proc, creating its special files;
--manage processes, threads and signals to processes.

if os.loadAPI("/lib/fs_manager") then
    fsmngr = _G["fs_manager"]
else
    print("cannot load fs_manager")
    exit()
end

cinfo = [[processor       : 0
vendor_id       : ComputerCraft
cpu family      : -1
model           : 17
model name      : ComputerCraft CraftCPU @ TickGHZ
stepping        : 0
microcode       : 0x17
cpu MHz         : 1
cache size      : 0 KB
physical id     : 0
siblings        : 1
core id         : 0
cpu cores       : 1
apicid          : 0
initial apicid  : 0
fpu             : yes
fpu_exception   : yes
cpuid level     : -1
wp              : yes
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer xsave avx f16c rdrand lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms
bogomips        : 0
clflush size    : 0
cache_alignment : 32
address sizes   : 36 bits physical, 48 bits virtual
power management:
]]

function CPUINFO()
    return cinfo
end

cpuinfo_file = {}
cpuinfo_file.name = "/proc/cpuinfo"
cpuinfo_file.file = {}
cpuinfo_file.file.write = function(data)
    print("cannot write to /proc/cpuinfo")
end

cpuinfo_file.file.read = function(bytes)
    if bytes == nil then
        return CPUINFO()
    else
        return CPUINFO().sub(0, bytes)
    end
end


