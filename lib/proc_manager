#!/usr/bin/env lua
--proc manager, the rewrite

--[[
    Process Manager:
        Primary: Manage Processes and running programs
        Secondary: manage /proc folder
]]

RELOADABLE = false

local libproc = {}
libproc.thread = {}

--Process list, running process and last used PID
local processes = {}
local running = 0
local pid_last = 0

--Thread Management
local threads = {}
local starting = {}
local event_filter = nil
local THREAD_STARTED = false

local fork_pid = nil

--Old os.run(since it will be overwrited with calls to Process methods)
local old_run = os.run

local function killproc(p)
    processes[p.pid] = -1
end

local function killpid(pid)
    processes[pid] = -1
end

function __killallproc()
    if CUBIX_REBOOTING or CUBIX_TURNINGOFF then
        for pid,process in pairs(processes) do
            if process ~= -1 then
                killproc(process)
            end
        end
    else
        return ferror("proc.kapr: not rebooting or turningoff")
    end
end

Process = function(file)
    local self = {}
    pid_last = pid_last + 1

    self.pid = pid_last --PID of process
    self.file = file --File that the process represent
    self.parent = '' --Parent of process
    self.childs = {} --Its childs

    self.user = ''
    self.uid = -1 --The user(uid) that is running the process
    self.lineargs = '' --arguments to process
    self.user = ''
    self.tty = '' --TTY that is running the process

    self.thread = nil --Thread representing the process

    os.debug.debug_write("[proc] new: "..self.file, false)
    return self
end

local function start_thread(fn, id, pid, bt)
    thread = {
        id = id,
        cr = coroutine.create(fn),
        blockTerm = bt or false,
        error = nil,
        filter = nil,
        dead = false,
        pid = pid
    }
    table.insert(starting, thread)
    if not THREAD_STARTED then
        thread_start_all()
    end
    return thread
end
libproc.thread.start_thread = start_thread

local function create_thread(fn, id, pid, bt)
    thread = {
        id = id,
        cr = coroutine.create(fn),
        blockTerm = bt or false,
        error = nil,
        filter = nil,
        dead = false,
        pid = pid
    }
    table.insert(starting, thread)
    return thread
end
libproc.thread.create_thread = create_thread

local function tick(t, evt, ...)
    if t.dead then return end
    if t.filter ~= nil and evt ~= t.filter then return end
    if evt == 'terminate' and t.blockTerm then return end

    coroutine.resume(t.cr, evt, ...)
    t.dead = (coroutine.status(t.cr) == "dead")
end

local function tick_all()
    if #starting > 0 then
        local c = starting
        starting = {}
        for _,v in ipairs(c) do
            tick(v)
            table.insert(threads, v)
        end
    end

    local evt
    if event_filter then
        evt = {event_filter(coroutine.yield())}
    else
        evt = {coroutine.yield()}
    end

    local dead = nil
    for k,v in ipairs(threads) do --tick all threads once
        tick(v, unpack(evt))
        if v.dead then --if ded, remove him from threads list
            if dead == nil then dead = {} end

            table.insert(dead, k - #dead) --catalogue thread as dead
            killpid(v.pid) --kill proces related to the thread
        end
    end

    --remove all dead threads
    if dead ~= nil then
        for _,v in ipairs(dead) do
            table.remove(threads, v) --remove all dead threads
        end
    end
end

rawset(os, "setGlobalEventFilter", function(fn)
    if event_filter ~= nil then error("This can only be set once!") end
    event_filter = fn
    rawset(os, "setGlobalEventFilter", nil)
end)

function thread_start_all()
    if not THREAD_STARTED then
        THREAD_STARTED = true
        while #threads > 0 or #starting > 0 do
            tick_all()
        end
        return ferror("thread_man: all threads ended")
    else
        return ferror("thread_start_all: already started")
    end
end

function run(self, arguments, pipe, env, normal_run)
    --[[
        Actually run a process
    ]]

    permission.default() --set default permissions

    local cu = os.lib.login.currentUser()
    if not fs.verifyPerm(self.file, cu, 'x') then
        ferror("proc.run: perm error")
        return -1
    end

    if cu == '' then
        self.user = 'root'
    else
        self.user = cu
    end

    self.uid = os.lib.login.userUID()
    processes[self.pid] = self

    local ctty = os.lib.tty.getcurrentTTY()
    if ctty == nil or ctty == {} or ctty == '' then
        self.tty = '/dev/ttde'
    else
        self.tty = ctty.id
    end

    local function handler()
        env['program_pipe'] = pipe
        if type(pipe) == 'table' then
            env['write'] = function(a)
                pipe:write(a)
            end
            env['print'] = function(a)
                pipe:write(a..'\n')
            end
            env['read'] = function()
                return pipe:readLine()
            end
        end
        old_run(env, self.file, unpack(arguments, 1))
    end

    running = self.pid
    if normal_run == true then
        handler()
        killproc(self)
    else
        self.thread = start_thread(handler, tostring(self.pid)..':'..tostring(self.file), self.pid)
    end
    --killproc(self)
end

--arguments : table
--parent : Process
--pipe : Pipe
--enviroment : table
local function run_itself(self, arguments, parent_proc, pipe, enviroment, normal_run)
    --[[
        Run a process with its arguments, parent, pipe and defined enviroment
    ]]

    if self.parent == nil or self.parent == '' then
        --If the parent is not set, set it to init
        set_parent(self, os.__init_process)
    end

    --default things
    if arguments == nil then arguments = {} end
    if enviroment == nil then enviroment = {} end

    local line_args = ''
    for k,v in ipairs(arguments) do
        line_args = line_args .. v .. ' '
    end
    self.lineargs = line_args

    run(self, arguments, pipe, enviroment, normal_run)
end

function prexec(process, args, prt, pipe, env, normal_run)
    return run_itself(process, args, prt, pipe, env, normal_run)
end
_G['prexec'] = prexec

--set a parent process for a process
function set_parent(self, parent)
    --[[
        set_parent(
            self : Process,
            parent : Process
        )

        Set a process parent.
    ]]
    if parent ~= nil and type(parent) == 'table' then
        --get parent from file
        self.parent = parent.file
        parent.childs[ (#parent.childs) + 1 ] = self.pid
    else
        self.parent = nil
        os.debug.debug_write("[proc] parent nil: "..self.file, false)
    end
end

--CC os.run: use CBX processes but only recieve as CC os.run args
os.run = function(enviroment, executable, ...)
    local args = {...}
    local p = Process(executable)
    return run_itself(p, args, nil, nil, enviroment)
end

--os.runfile: use CBX processes with all possible arguments
os.runfile = function(executable, arguments, parent, pipe, env)
    local p = Process(executable)
    return run_itself(p, arguments, parent, pipe, env)
end

function get_processes()
    return deepcopy(processes)
end

function get_running()
    return running
end
_G['pget_running'] = get_running

os.currentUID = function()
    local proc = processes[running]
    if proc == nil or proc == -1 then
        ferror("proc.currentUID: proc == (nil or -1)")
        return nil
    else
        return proc.uid
    end
end
libproc.procUID = os.currentUID

function get_by_pid(pid)
    --get a process by its PID(not of deepcopy, but the original process) with permission
    if permission.grantAccess(fs.perms.SYS)
     or processes[running].file == '/bin/cshell'
     or processes[running].file == '/sbin/login'
     or processes[running].file == '/sbin/kill'
     or processes[running].file == 'sbin/kill' then
        return processes[pid]
    else
        ferror("get_by_pid: perm error")
    end
end

--get itself as a process object
function get_itself()
    if permission.grantAccess(fs.perms.SYS)
     or processes[running].file == '/bin/cshell'
     or processes[running].file == '/sbin/login'
     or processes[running].file == '/sbin/kill'
     or processes[running].file == 'sbin/kill' then
        return processes[running]
    else
        ferror("get_itself: perm error")
    end
end

--same from original proc_manager

FLAG_CTTY = 0 --all processes in the same tty(the tty)
FLAG_ATTY = 1 --all process in all tty
FLAG_APRC = 2 --all process in the system

function filter_proc(filter_flag)
    if filter_flag == FLAG_CTTY then
        local ctty = os.lib.tty.getcurrentTTY()
        local filtered = {}
        for k,v in pairs(get_processes()) do
            if type(v) == 'table' then
                if v.tty == ctty.id then
                    filtered[v.pid] = v
                end
            end
        end
        return filtered
    elseif filter_flag == FLAG_ATTY or filter_flag == FLAG_APRC then
        local filtered = {}
        for k,v in pairs(get_processes()) do
            if type(v) == 'table' then
                filtered[v.pid] = v
            end
        end
        return filtered
    else
        ferror("proc.filter_proc: no flag")
        return nil
    end
end

local function chair_reg(pid)
    fork_pid = pid
end
libproc.chair_register = chair_reg

function fork(f)
    local p = Process(f)
    local fpid = fork_pid
    if fpid == nil then
        fpid = running
    end
    set_parent(p, processes[fpid])
    return p
end
_G['fork'] = fork
libproc.fork = fork

function kill(pid, sig)
    local p = process[pid]
    if p.uid == os.lib.login.userUID() or os.lib.login.userUID() == 0 then
        killproc(processes[pid])
    end
end

function check_proof(p)
    -- check if a process is a original one(not a copy)
    if p == processes[p.pid] then
        return true
    end
    return false
end
libproc.check_proof = check_proof

local function copy_threads()
    return deepcopy(tmerge(threads, starting))
end
libproc.thread.copy_threads = copy_threads

function libroutine()
    _G['new_process'] = Process
    _G['libproc'] = libproc
end
