#!/usr/bin/env lua
--proc manager
--task: manage /proc, creating its special files;
--manage processes, threads and signals to processes.

if os.loadAPI("/lib/debug_manager") then
    debug = _G["debug_manager"]
    debug.debug_write("[proc_manager] debug_manager: loaded", false)
else
    debug.debug_write("[proc_manager] debug_manager: not loaded")
end

if os.loadAPI("/lib/fs_manager") then
    fsmngr = _G["fs_manager"]
else
    print("cannot load fs_manager")
    exit()
end

function strsplit(inputstr, sep)
    if sep == nil then
        sep = "%s"
    end
    local t={} ; i=1
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        t[i] = str
        i = i + 1
    end
    return t
end

os.processes = {}
os.pid_last = 1

os.signals = {}
os.signals.SIGKILL = 0

os.call_handle = function(proc, handl)
    r = proc.rfile
    h = r._handler
    h.signal_handler(handl)
end

os.send_signal = function (proc, signal)
    if proc == nil then
        print("process not encoutered")
    elseif signal == 0 then
        debug.debug_write("[proc_manager] "..proc.file.." recieved SIGKILL.", false)
        os.processes[proc.pid] = nil
        for k,v in pairs(proc.childs) do
            os.send_signal(v, 'kill')
        end
        os.terminate(proc)
    end
end

os.terminate = function (p)
    os.call_handle(p, "kill")
    p = nil
end

os.run_process = function(p)
    debug.debug_write("[testing] running "..p.file, false)
    os.processes[p.pid] = p
    os.loadAPI(p.file)
    K = strsplit(p.file, '/')
    p.rfile = _G[K[#K]]
    os.viewTable(p.rfile)
    --os.sleep(2)
end

os.set_child = function(prnt, proc)
    prnt.childs[#prnt.childs + 1] = proc
end

os.set_parent = function(proc, parent)
    os.set_child(parent, proc)
    proc.parent = parent.file
end

os.new_process = function(executable)
    local cls = {}
    os.pid_last = os.pid_last + 1
    cls.pid = os.pid_last
    cls.file = executable
    cls.parent = nil
    cls.childs = {}
    cls.rfile = nil
    debug.debug_write("[proc_manager] new process: "..cls.file, false)
    return cls
end

parent_init = os.new_process("/sbin/init")
os.run_process(parent_init)

os.runfile_proc = function(executable, parent)
    if parent == nil then _parent = parent_init end --making sure /sbin/init is parent of all processes
    _process = os.new_process(executable)
    os.set_parent(_process, _parent)
    os.run_process(_process)
    print("trying to kill")
    os.send_signal(_process, os.signals.SIGKILL)
end

function test_processes()
    p1 = os.new_process("/sbin/init")
    os.run_process(p1)
    os.send_signal(p1, os.signals.SIGKILL)
end

--test_processes()

cinfo = [[processor       : 0
vendor_id       : ComputerCraft
cpu family      : -1
model           : 17
model name      : ComputerCraft CraftCPU @ TickGHZ
stepping        : 0
microcode       : 0x17
cpu MHz         : 1
cache size      : 0 KB
physical id     : 0
siblings        : 1
core id         : 0
cpu cores       : 1
apicid          : 0
initial apicid  : 0
fpu             : yes
fpu_exception   : yes
cpuid level     : -1
wp              : yes
flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer xsave avx f16c rdrand lahf_lm ida arat epb xsaveopt pln pts dtherm tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms
bogomips        : 0
clflush size    : 0
cache_alignment : 32
address sizes   : 36 bits physical, 48 bits virtual
power management:
]]

function CPUINFO()
    return cinfo
end

cpuinfo_file = {}
cpuinfo_file.name = "/proc/cpuinfo"
cpuinfo_file.file = {}
cpuinfo_file.file.write = function(data)
    print("cannot write to /proc/cpuinfo")
end

cpuinfo_file.file.read = function(bytes)
    if bytes == nil then
        return CPUINFO()
    else
        return CPUINFO().sub(0, bytes)
    end
end

temperature_file = {}
temperature_file.name = "/proc/temperature"
temperature_file.file = {}
temperature_file.file.write = function(data)
    print("cannot write to /proc/temperature")
end

temperature_file.file.read = function(bytes)
    return 'computer: 30C'
end





