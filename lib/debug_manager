#!/usr/bin/env lua
--Debug Manager

--[[
    Task: Manage debug information from the kernel and any other program
]]

local __debug_buffer = ''
local __debug_counter = 0

function debug_write_tobuffer(dmessage)
    __debug_buffer = __debug_buffer .. '[' .. __debug_counter ..']' .. dmessage
    local dfile = fs.open("/tmp/syslog", 'a')
    dfile.write('[' .. __debug_counter ..']' .. dmessage)
    dfile.close()
    __debug_counter = __debug_counter + 1
end

function debug_write(dmessage, screen, isErrorMsg)
    if os.__kflag.nodebug == false or os.__kflag.nodebug == nil then
        if isErrorMsg then
            term.set_term_color(colors.red)
        end
        if screen == nil then
            print('[' .. __debug_counter ..']' .. dmessage)
        elseif screen == false and cubix.boot_flag or _G['CUBIX_REBOOTING'] or _G['CUBIX_TURNINGOFF'] then
            print('[' .. __debug_counter ..']' .. dmessage)
        end
        debug_write_tobuffer(dmessage..'\n')
        os.sleep(math.random() / 16)
        --os.sleep(.5)
        term.set_term_color(colors.white)
    end
end

function testcase(message, correct)
    term.set_term_color(colors.orange)
    debug_write(message)
    term.set_term_color(colors.white)
end

function warning(msg)
    term.set_term_color(colors.yellow)
    debug_write(msg)
    term.set_term_color(colors.white)
end

function dmesg()
    print(__debug_buffer)
end

function kpanic(message)
    if _G['LX_SERVER_LOADED'] == nil or _G['LX_SERVER_LOADED'] == false then
        --LuaX not loaded
        term.set_term_color(colors.yellow)
        debug_write("[cubix] Kernel Panic!")
        if cubix.boot_flag then --early kernel
            debug_write("Proc: /boot/cubix")
        else
            debug_write("Proc: "..tostring(pget_running()))
        end
        term.set_term_color(colors.red)
        debug_write(message)
        term.set_term_color(colors.white)
        os.system_halt()

    else
        --luaX enabled, use it to write the kpanic
        os.lib.lxServer.write_solidRect(3,3,25,7,colors.red)
        os.lib.lxServer.write_rectangle(3,3,25,7,colors.black)
        local kpanic_title = 'Kernel Panic!'
        for i=1, #kpanic_title do
            local letter = string.sub(kpanic_title,i,i)
            lx.wletter(letter, 9+i, 3, lx.red, lx.white)
        end

        local process_line = ''
        if not os.lib.proc or cubix.boot_flag then --how are you in early boot and with luaX?
            process_line = "proc: /boot/cubix"
        else
            process_line = "pid: "..tostring(pget_running())
        end

        for i=1, #process_line do
            local letter = string.sub(process_line,i,i)
            lx.wletter(letter, 4+i, 5, lx.red, lx.white)
        end

        local procname = ''
        if not os.lib.proc or cubix.boot_flag then --how are you in early boot(seriously, how)?
            procname = "name: /boot/cubix"
        else
            procname = "pname: "..tostring(os.lib.proc.get_processes()[pget_running()].file)
        end

        for i=1, #procname do
            os.lib.lx.write_letter(string.sub(procname,i,i), 4+i, 6, colors.red, colors.white)
        end

        for i=1, #message do
            os.lib.lx.write_letter(string.sub(message,i,i), 4+i, 7, colors.red, colors.white)
        end
        os.system_halt()
    end
end
