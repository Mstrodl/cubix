#!/usr/bin/env lua
--/sbin/init: manages (some part of) the user space

_handler = {}
_handler.signal_handler = function (sig)
    if sig == 'kill' then
        os.ferror("init: recieved SIGKILL")
        if permission.grantAccess(fs.perms.ROOT) then
            os.shutdown()
        end
    end
end

local RUNLEVELFUNC = {}

function runlevel_0()
    if permission.grantAccess(fs.perms.ROOT) then
        os.shutdown()
    end
    permission.default()
end

function runlevel_1()
    --single-user
    for k,v in pairs(fs.list("/etc/rc1.d/")) do
        shell.run(fs.combine("/etc/rc1.d",v))
    end
    while true do
        os.runfile_proc("/sbin/login")
    end
end

function runlevel_2()
    --multiuser(all ttys running login) withtout network service
    --[[
    
    loadmodule("multiuser", "/lib/multiuser/multiuser.lua")
    
    ]]
    --os.runfile_proc("/sbin/login")
end

function runlevel_3()
    --multiuser and network service
    --[[

    loadmodule("multiuser", "/lib/multiuser/multiuser.lua")
    
    loadmodule("network", "/lib/net/network.lua")
    os.lib.network.new_interface("loop", "loop")
    os.lib.network.new_interface("eth0", "cable")
    os.lib.network.new_interface("wlan0", "wireless")
    os.lib.network.set_loop("127.0.0.1")
    os.lib.network.register_entry("localhost", "127.0.0.1")
    
    ]]
    --os.runfile_proc("/sbin/login")
end

function runlevel_5()
    --start LuaX
    --[[
    
    LuaX Structure:

    lx -> lxServer -> lxClient -> lxWindow
                               -> lxMouse
    
    
    --base ("hardware access // pixels", "double buffering" are things that lx can do)
    loadmodule("lx", "/lib/luaX/lx.lua")

    --LuaX Server (makes squares)
    loadmodule("lxServer", "/lib/luaX/lxServer.lua")

    --LuaX Client (manager)
    loadmodule("lxClient", "/lib/luaX/lxClient.lua")

    --Window library
    loadmodule("lxWindow", "/lib/luaX/lxWindow.lua")

    --Mouse library
    loadmodule("lxMouse", "/lib/luaX/lxMouse.lua")
    
    --loading Lua X Terminal(lxterm)
    os.lib.lxServer.blank()
    local lxterm_window = os.lib.lxWindow.Window("/g/lxterm")
    os.lib.lxClient.activate_mouse()
    os.lib.lxClient.loadWindow(lxterm_window)
    os.lib.lxClient.mainloop()

    ]]
    os.internals.loadmodule("lx", "/lib/luaX/lx.lua")
    --os.lib.lx.initialize()
    os.internals.loadmodule("lxServer", "/lib/luaX/lxServer.lua")
    os.internals.loadmodule("lxClient", "/lib/luaX/lxClient.lua")
    os.internals.loadmodule("lxWindow", "/lib/luaX/lxWindow.lua")
    os.lib.lx.blank()
    --os.lib.lx.demo()
    --os.lib.lxServer.sv_demo()
    local lxterm = os.lib.lxWindow.Window.new("/g/lxterm/lxterm.lxw")
    os.lib.lxClient.loadWindow(lxterm)
    --os.lib.lxClient.mainloop()
    os.system_halt()
end

function runlevel_6()
    --reboot
    if permission.grantAccess(fs.perms.ROOT) then
        os.debug.debug_write("[init] rebooting with root permission")
        os.runfile_proc("/sbin/reboot")
    else
        --rebooting without permissions
        os.debug.debug_write("[init] rebooting withOUT root permission")
        os.reboot()
    end
    permission.default()
end

RUNLEVELFUNC[0] = runlevel_0
RUNLEVELFUNC[1] = runlevel_1
RUNLEVELFUNC[2] = runlevel_2
RUNLEVELFUNC[3] = runlevel_3
RUNLEVELFUNC[5] = runlevel_5
RUNLEVELFUNC[6] = runlevel_6

function main(args)
    --TODO: ability to runlevel
    if args[1] ~= nil then
        runlevel = tonumber(args[1])
    else
        if fs.exists("/etc/inittab") then
            local inittab = fs.open("/etc/inittab", 'r')
            local r = os.strsplit(inittab.readAll(), ':')[2]
            runlevel = tonumber(r)
            inittab.close()
        else
            os.debug.kpanic("[init] /etc/inittab not found")
            return 1
        end
    end
    RUNLEVELFUNC[runlevel]()
    return 0
end

