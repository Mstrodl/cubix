#!/usr/bin/env lua
--/sbin/init: manages (stuff of) the user space

local RUNLEVELFUNC = {}

function runlevel_0()
    if permission.grantAccess(fs.perms.ROOT) then
        os.shutdown()
    end
    permission.default()
end

function runlevel_1()
    --single-user
    for k,v in pairs(fs.list("/etc/rc1.d/")) do
        shell.run(fs.combine("/etc/rc1.d",v))
    end
    while true do
        local init_proc = fork('/sbin/login')
        prexec(init_proc, nil, nil, nil, nil, true)
    end
end

function runlevel_2()
    --multiuser(all ttys running login) withtout network service
    os.internals.loadmodule("multiuser", "/lib/multiuser/multiuser.lua")
end

function runlevel_3()
    --multiuser and network service
    os.internals.loadmodule("network", "/lib/net/network.lua")
    os.internals.loadmodule("multiuser", "/lib/multiuser/multiuser.lua")
end

function runlevel_5()
    --start LuaX, multiuser and network support

    os.internals.loadmodule("network", "/lib/net/network.lua")
    os.internals.loadmodule("multiuser", "/lib/multiuser/multiuser.lua")
    os.runfile("/bin/lx", {'start'})
end

function runlevel_6()
    --reboot
    if permission.grantAccess(fs.perms.ROOT) then
        os.debug.debug_write("[init] rebooting with root permission")
        os.runfile("/sbin/reboot")
    else
        --rebooting without permissions
        os.debug.debug_write("[init] rebooting withOUT root permission")
        os.reboot()
    end
    permission.default()
end

RUNLEVELFUNC[0] = runlevel_0
RUNLEVELFUNC[1] = runlevel_1
RUNLEVELFUNC[2] = runlevel_2
RUNLEVELFUNC[3] = runlevel_3
RUNLEVELFUNC[5] = runlevel_5
RUNLEVELFUNC[6] = runlevel_6

function main(args)
    if args[1] ~= nil then
        runlevel = tonumber(args[1])
    else
        if fs.exists("/etc/inittab") then
            local inittab = fs.open("/etc/inittab", 'r')
            local r = os.strsplit(inittab.readAll(), ':')[2]
            runlevel = tonumber(r)
            inittab.close()
        else
            os.debug.kpanic("[init] /etc/inittab not found")
            return 1
        end
    end
    os.lib.tty.current_tty("/dev/tty1")
    RUNLEVELFUNC[runlevel]()
    return 0
end

main({...})
