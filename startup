#!/usr/bin/env lua

-- 200 up
-- 208 down
-- 28 enter

term.clear()
term.setCursorPos(1,1)

function strsplit(inputstr, sep)
        if sep == nil then
                sep = "%s"
        end
        local t={} ; i=1
        for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
                t[i] = str
                i = i + 1
        end
        return t
end

term.set_term_color = function (c)
    if term.isColor() then
        term.setTextColor(c)
    end
end

local function cprint(text)
    local x,y = term.getSize()
    local x2,y2 = term.getCursorPos()
    term.setCursorPos(math.ceil((x / 2) - (text:len() / 2)), y2)
    write(text..'\n')
end

function CUI(m)
    n=1
    l=#m
    while true do
        term.clear()
        term.setCursorPos(1,2)
	    cprint("-- SBL (Simple BootLoader) --")
        cprint("\n")
        for i=1, l, 1 do
            if i==n then
                cprint(i .. " ["..m[i].."]")
            else
                cprint(i .. " " .. m[i])
            end
        end
        cprint("\n")
        cprint("Select an OS to load[arrow up/arrow down]")
        local kpress = nil
        a, b= os.pullEventRaw()
        if a == "key" then
            if b==200 and n>1 then n=n-1 end
            if b==208 and n<l then n=n+1 end
            if b==28 then kpress = 'ENTER' break end
            if b==18 then kpress = 'e' break end
        end
    end
    term.clear()
    term.setCursorPos(1,1)
    return {n, kpress}
end

function read_osfile()
    local systems_file = fs.open("/systems.cfg", 'r')
    local systems = strsplit(systems_file.readAll(), "\n")
    local i = 1
    local detected_oses_name = {}
    local detected_oses_path = {}
    print("reading systems.cfg...")
    for k,v in pairs(systems) do
        local sysdat = strsplit(systems[k], ';')
        detected_oses_name[i] = sysdat[1]
        detected_oses_path[i] = sysdat[2]
        print("from systems.cfg: "..sysdat[1]..' : '..sysdat[2])
        i = i + 1
        os.sleep(.2)
    end
    systems_file.close()
    return {detected_oses_name, detected_oses_path}
end

function loadkernel(kfile, memory, vmode)
    --loads a .lua kernel file with its main function
    if kfile == 'lineboot' then
        write("SBL:loadkernel> ")
        lFile = read()
    else
        lFile = kfile
    end
    print("set root=(hd0,1)")
    print("set mem="..memory)
    print("insmod kernel")
    print("kernel '"..lFile.."' -vmode "..vmode)
    print("initrd -")
    print("boot")
    print("\nSBL: loading \""..kfile.."\"")
    os.sleep(.5)
    local tArgs = strsplit(lFile, ' ')
    local sCommand = tArgs[1]
    if sCommand == '/rom/programs/shell' then
        os.run({}, "/rom/programs/shell")
    else
        os.run({}, sCommand, table.unpack(tArgs, 2))
    end
end

function loadeditor()
    return 0
end

term.set_term_color(colors.green)
print("Welcome to SBL!\n")
term.set_term_color(colors.white)
os.sleep(.5)

oses = read_osfile()
table.insert(oses[1], "Load a OS manually")
table.insert(oses[2], "lineboot")
local user_selection = CUI(oses[1]) --only names
selected_os = user_selection[1]

--[[
if user_selection[2] == 'ENTER' then
    loadkernel(oses[2][selected_os], 512, 'cc-basictext')
elseif user_selection[2] == 'e' then
    loadeditor(oses[2][selected_os])
end
]]

loadkernel(oses[2][selected_os], 512, 'cc-basictext')

while true do os.sleep(0) end


