On the subject of the Process Manager

Primary task:
    Process Manager creates, kills and interfaces process with the userspace.
  Global variables:
    -os.processes [table] - shows the list of actual processes running at the system
    -os.pid_last [number] - the last PID of a process, used to create the PID of the next process
    -os.signals [table] - system signals(SIGKILL, SIGINT, SIGILL, SIGFPE...)

  Functions:
    -Process related:
      -os.call_handle(process, handler)
        -calls a process _handler, which calls a program _handler
      -os.send_signal(process, signal)
        -sends a signal to a process, depending of what signal
          -SIGKILL: kills the process and its children
      -os.terminate(process)
        -terminates a process, first it calls its _handle using os.call_handle
      -os.run_process(process, arguments)
        -runs a process with its arguments in a table
      -os.set_child(parent, child)
        -sets a relation between parent process and child process
      -os.set_parent(child, parent)
        -inverse of os.set_child
      -os.new_process(executable)
        -creates a process
      -os.runfile_proc(executable, arguments, parent)
        -creates a process, set its parent and runs it with specified arguments, after that, sends a SIGKILL to it


 * Secondary task:
    The concept of /proc is around Managed Files, they're files that the kernel can show information to the user.
     * /proc/cpuinfo
     * /proc/temperature
     * /proc/partitions
