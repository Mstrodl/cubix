0.5.1 - 0.5.2 (17-01-2015) [just writing changes before official release]
  tl;dr this is not finished

  Major changes:
    +login manager rewrited (sudoers, groups, and more)!
    +added better support for devices

  Devices:
    +changed way /dev/random and /dev/urandom get random seeds(based on os.clock(), not os.time())

0.4.0 - 0.5.1 (12-21-2015)
  tl;dr you should use this now

  Major changes:
    +yapi works! (more details in commit 596ce81)
    +luaX, a graphical interface to cubix!

  General changes(cubixli and cubix):
    *bugfix: running runlevel as a kernel option
    */tmp/debug_info is now /tmp/syslog
    +os.ferror is in _G too(as only ferror)
    +external device support(stdin, stdout and stderr almost finished)
    +new device: /dev/full
    +added more signals in os.signals
    +loadmodule_ret: returns the module _G, instead of putting it on os.lib
    +device_write and device_read are the default interfaces to devices now.
    +/sbin/sbl-mkconfig: 'default' mode now generates system.cfg based of default.cfg, not in a hardcoded way anymore
    +dev_available(path): simply returns true if the device exists, false if its not

  Libraries:
    +proc:
        +os.getrunning() returns the running PID of the system
        +generate_pfolder(process, procfolder) generates a /proc/<pid> folder, with the executable and the status of the process
    +os.debug.kpanic: when lx is loaded, shows a beautiful panic message
    +login: kpanic when opening /tmp/current_user or /tmp/current_path gives an error
    +acpi:
        +clears /proc/<pid> folders when __clear_temp is called
        +sets CUBIX_TURNINGOFF to true when acpi_shutdown is called
        +sets CUBIX_REBOOTING to true when acpi_reboot is called
          +because of that, init won't cause a reboot to be a shutdown

  Added programs:
    +/bin/panic: just calls kpanic
    +/bin/curtime: shows current time(GMT 0)
    +/bin/hashrate: just a utility.

  CubixLI:
    +yapstrap creates /tmp/install_lock, not unloadenv
    +sbl_bcfg: restores systems.cfg to default configurations(just in case if the cubix repo provides a broken systems.cfg or a different one from the recommended)
    +timesetup: writes servers to /etc/time-servers
    +genfstab: coming in another commit, but it is there

  Manuals:
    +CMFL, Cubix Manual Formatting Language.
        yapi manual is written in cmfl, you should see it


0.3.7 - 0.4.0 (11-28-2015)
  +Finally, a stable version(still has its bugs but yeah)
  ![/bin/sleep /bin/read] bugs everything, deleted for now
  +cubixli has some workarounds to deldisk
    this includes deleting the partitions cubixli created
    (leading to a halt)
  +cubixli: lsblk, cat, shutdown, sethostname
  +cubixli: "override", when the override flag is activated, all the commands that are not allowed are done
  +/sbin/init: runlevels 3 and 5 being made

0.3.6 - 0.3.7 (11-16-2015)
  +Writing a Installer(cubix_live_installer or cubixli for short)
  -/boot/cubix_minimal does not exist anymore
  +rewrited manuals for 0.3.7
  -os.runfile (yes, this is now marked as bad)
  +finally, /bin/cksum works(only with files)!
  +/bin/cat works with pipes(getting from file and throwing into a pipe)
  +rewrited [/bin/cp /bin/mkdir /bin/mv], using os.chell.resolve now
  +os.cshell.getpwd
  +/bin/eject works using disk.eject, not os.runfile
  -[/bin/read /bin/sleep] is not working [proposital as I'm working on a solution]
  +/bin/rm does not use os.runfile, using fs.delete now
  +/bin/sh uses os.runfile_proc, not os.runfile
  !/bin/wget: working on problems
  !/bin/yapi: still WIP
  +/bin/yes: rewrite based on dev_random
  +/boot/cubix sets IS_CUBIX = true when booting
  *bugfix: runlevel= wasnt working
  +_prompt(message, yescmd, ncmd)
    -Shows a prompt to the user, if he types the same as yescmd, return true
  *bugfix_sbl: kernel module works
  +/dev/MAKEDEV removes /tmp
  +acpi deletes and creates /tmp, not using os.runfile
  +Pipe:readAll()
  +check in proc_manager if p.rfile.main ~= nil and p.rfile.main == function
  +os.run_process sends SIGKILL to process after its execution
  *bugfix: /sbin/adduser crashed when #args == 0
  +/sbin/adduser uses os.lib.login
  +/sbin/init runs scripts in /etc/rc1.d using shell.run, not os.runfile
  +Rewrite of some manual pages

0.3.5 - 0.3.6 (11-07-2015)
  *bugfix: /dev/MAKEDEV does not work more on craftOS, fixed installation
  +SBL: bootscripts!
  +Yet Another Package Installer: /bin/yapi
  +NEW: os.tail
  !os.strsplit now warns you if the type of inputstr isn't string
  +/startup now runs /boot/sbl

0.3.4 - 0.3.5 (10-31-2015)
  +Cubix is now MIT licensed
  +new (not new) security lock: when kernel is stable, "os.pullEvent = os.pullEventRaw" is applied
  +new: /sbin/modprobe
  +when loadmodule() loads a module that RELOADABLE = false is defined, it does not load the module
    This helps when trying to "modprobe proc /lib/proc_manager", since this would wipe os.processes,
    leaving no trace of init or other processes
  *bugfix: /bin/cshell does not run /sbin/, even if you provide the path
  +/bin/ls does not depend of os.runfile (own algorithim now)
  -os.runfile: DEPRECATED!
  +/bin/sudo uses permission module and front_login
  +os.system_halt does not use os.sleep(10000...) anymore
  !SBL: CraftOS does not boot anymore, still working on it
  +acpi uses permission now
  +acpi: acpi_suspend() works (/sbin/pm-suspend)!
  +debug_write(message, screen) -> debug_write(message, screen, isError)
  +new: debug.warning(message)
  {disclaimer here: I used quite a lot of code from UberOS to create
  the filesystem manager to now, because of this, cubix is now MIT licensed}
  +fs_manager: permissions in unix format, load filesystems(for now its
  CFS, cubix file system, but there will be more), nodes and mounting devices(/bin/mount and /bin/umount) :D
  +/sbin/kill: now can kill multiple PIDs!
  !sudo: because of magic, sudo still makes it way to os.processes, even
  if killed, so, don't trust it
  +/bin/license: shows /LICENSE


0.3.3 - 0.3.4 (10-21-2015)
  +new loading mechanism for kernel, decreasing its size
  +login now uses sha256(password + salt) instead of sha256(password)
  +login: session tokens!
  +ACPI management now possible(SBL loads it by default)!
  +new: os.generateSalt
  *bugfix: /proc/cpuinfo & /proc/temperature now support stripping
  +new: /proc/partitions
  +new TTY logic

0.3.2 - 0.3.3 (10-13-2015)
  +new pipe logic using classes
  +starting fs_manager
  +/bin/tee now works!
  *bugfix: "while true do" in /bin/yes
  +/bin/cshell: now searches in path
  +/bin/sudo: now ignores if current user is root
  +/bin/init: runlevels (incomplete)
  +debug: kernel panic complete
  *fix: proc_manager: now the first PID is 1, not 2!
  +/bin/cpkg: Cubix Packages [wip]
  +reboot moved to /sbin

0.3.1 - 0.3.2 (10-10-2015)
  *bugfix: factor makes a infinite loop when n <= 0
  +/bin/cscript: CubixScript [going to create a manual]!
  +/bin/glep: grep in lua!
  +SBL: now you can load a kernel manually!
  +/bin/cubix
    +added boot options, for now its just "quiet" and "nodebug".
    +NEW os.pprint, stands for "pipe print"
  +/sbin/init
    +runlevels (still working)
  +/bin/cshell: FINALLY, PIPES! ("ps | glep login" works)

0.3.0 - 0.3.1 (10-07-2015)
  +/bin/cshell: now has a history
  +/bin/wget
  +/bin/cubix: NEW os.safestr, os.strsplit
    +about init: now init has some control about how the system will load (just loads /sbin/login, but its a thing!)
  +/dev/random: not using os.time(), using os.clock() instead!
  +procmanager: calls to debug are being written to os.debug

0.2.1 - 0.3.0 (10-05-2015)
  -bugfix in cp, rn, mv, mkdir, touch (including the draft nano)... (string comparison, "s[1] == 'a'" does not work)
  -consistency fix on cat: opening a file and not closing it after use
  -cp: does not require absolute paths now!
  -su and sulogin: using os.runfile() now
  -cleanup: not using /bin/shell and /bin/wshell anymore!
  -/dev/MAKEDEV now creates /usr
  -login manager: add users and change password of a user

0.1.0a - 0.2.1 (by 09-30-2015)
  -proc_manager now can kill processes, including their children!
    -every program has to have its main(args) function defined!, it's a rule.
    -proc_manager runs this function when the process of a file is created and run(using os.run_process)
  -Manuals!, use man to run, following the syntax:
    -man <topic> <manual>
      -follows to /usr/manuals/topic/manual.man
    -man <manual>
      -follows to /usr/manuals/manual.man
